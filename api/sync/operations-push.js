// Legacy PUSH API –≤ —Ç–æ–º –∂–µ —Å—Ç–∏–ª–µ —á—Ç–æ –∏ operations.js
import { kv } from '@vercel/kv';

const corsHeaders = {
  'Access-Control-Allow-Origin': '*',
  'Access-Control-Allow-Methods': 'GET, POST, HEAD, OPTIONS',
  'Access-Control-Allow-Headers': 'Content-Type, Authorization',
};

export default async function handler(req, res) {
  // –î–æ–±–∞–≤–ª—è–µ–º CORS headers
  Object.entries(corsHeaders).forEach(([key, value]) => {
    res.setHeader(key, value);
  });

  if (req.method === 'OPTIONS') {
    return res.status(200).end();
  }

  if (req.method === 'HEAD') {
    return res.status(200).end();
  }

  try {
    if (req.method === 'POST') {
      // PUSH –æ–ø–µ—Ä–∞—Ü–∏–∏
      const { operations, deviceId, userId } = req.body;
      
      console.log(`üîÑ Legacy PUSH: Received ${operations?.length || 0} operations from device:`, deviceId);
      
      let savedCount = 0;
      let kvError = null;
      
      try {
        if (operations && operations.length > 0) {
          // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–∞–∂–¥—É—é –æ–ø–µ—Ä–∞—Ü–∏—é
          for (const operation of operations) {
            const key = `operation:${operation.id}`;
            await kv.set(key, {
              ...operation,
              deviceId, // –£–±–µ–∂–¥–∞–µ–º—Å—è —á—Ç–æ deviceId —Å–æ—Ö—Ä–∞–Ω–µ–Ω
              receivedAt: new Date().toISOString()
            }, { ex: 86400 * 7 }); // TTL 7 –¥–Ω–µ–π
            
            console.log(`‚úÖ Legacy PUSH: Saved operation ${operation.operation} on ${operation.table} from device ${deviceId}`);
            savedCount++;
          }
          
          console.log(`üì¶ Legacy PUSH: Successfully saved ${savedCount} operations to KV`);
        } else {
          console.log('‚ö†Ô∏è Legacy PUSH: No operations to save');
        }
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–π —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –¥–ª—è —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
        if (deviceId) {
          await kv.set(`lastSync:${deviceId}`, Date.now(), { ex: 86400 * 30 }); // TTL 30 –¥–Ω–µ–π
        }
        
      } catch (error) {
        console.error('‚ùå KV Error in legacy PUSH API:', error);
        kvError = error.message;
      }
      
      return res.status(200).json({
        success: true,
        syncedOperations: operations || [],
        conflicts: [],
        debug: {
          message: 'Legacy PUSH endpoint without auth (operations-push)',
          deviceId,
          operationsReceived: operations?.length || 0,
          operationsSaved: savedCount,
          kvError
        }
      });
      
    } else if (req.method === 'GET') {
      // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± endpoint
      return res.status(200).json({
        message: 'Legacy PUSH API endpoint',
        method: 'POST',
        usage: 'Send operations array with deviceId',
        debug: {
          endpoint: '/api/sync/operations-push',
          method: 'POST',
          auth: 'none required'
        }
      });
    }
    
    return res.status(405).json({ error: 'Method not allowed' });
    
  } catch (error) {
    console.error('‚ùå Operations-push API Error:', error);
    return res.status(500).json({ 
      error: 'Failed to process operations',
      legacy: true 
    });
  }
}
