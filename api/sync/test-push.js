// –¢–µ—Å—Ç–æ–≤—ã–π PUSH endpoint —á–µ—Ä–µ–∑ GET –∑–∞–ø—Ä–æ—Å (–¥–ª—è –æ–±—Ö–æ–¥–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏)
import { kv } from '@vercel/kv';

const corsHeaders = {
  'Access-Control-Allow-Origin': '*',
  'Access-Control-Allow-Methods': 'GET, OPTIONS',
  'Access-Control-Allow-Headers': 'Content-Type',
};

export default async function handler(req, res) {
  // –î–æ–±–∞–≤–ª—è–µ–º CORS headers
  Object.entries(corsHeaders).forEach(([key, value]) => {
    res.setHeader(key, value);
  });

  if (req.method === 'OPTIONS') {
    return res.status(200).end();
  }

  try {
    if (req.method === 'GET') {
      const { deviceId, action } = req.query;
      
      if (action === 'push') {
        // –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—É—é –æ–ø–µ—Ä–∞—Ü–∏—é –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–∞–ø–∏—Å–∏ –≤ KV
        const testOperation = {
          id: 'test_push_' + Date.now(),
          table: 'equipment',
          operation: 'CREATE',
          data: {
            name: 'Test Equipment from PUSH',
            description: 'Created via test-push endpoint'
          },
          deviceId: deviceId || 'test_device_push',
          timestamp: Date.now(),
          userId: 'test_user'
        };
        
        console.log(`üß™ Test PUSH: Creating test operation from device ${testOperation.deviceId}`);
        
        try {
          // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ—Å—Ç–æ–≤—É—é –æ–ø–µ—Ä–∞—Ü–∏—é –≤ KV
          const key = `operation:${testOperation.id}`;
          await kv.set(key, {
            ...testOperation,
            receivedAt: new Date().toISOString()
          }, { ex: 86400 }); // TTL 1 –¥–µ–Ω—å
          
          // –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–π —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
          await kv.set(`lastSync:${testOperation.deviceId}`, Date.now(), { ex: 86400 });
          
          console.log(`‚úÖ Test PUSH: Saved operation ${testOperation.id} to KV`);
          
          return res.status(200).json({
            success: true,
            message: 'Test operation created and saved to KV',
            operation: testOperation,
            kvStatus: 'connected',
            timestamp: new Date().toISOString()
          });
          
        } catch (kvError) {
          console.error('‚ùå KV Error in test-push:', kvError);
          return res.status(500).json({
            success: false,
            message: 'Failed to save to KV',
            kvError: kvError.message,
            operation: testOperation
          });
        }
        
      } else {
        // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é
        return res.status(200).json({
          success: true,
          message: 'Test PUSH endpoint',
          usage: 'Add ?action=push&deviceId=your_device to create test operation',
          example: '/api/sync/test-push?action=push&deviceId=test123'
        });
      }
    }
    
    return res.status(405).json({ error: 'Method not allowed' });
    
  } catch (error) {
    console.error('‚ùå Test-push endpoint error:', error);
    return res.status(500).json({ 
      error: 'Test endpoint failed',
      details: error.message
    });
  }
}
