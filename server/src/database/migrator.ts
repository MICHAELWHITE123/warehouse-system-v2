import { readFileSync } from 'fs';
import { join } from 'path';
import { query, queryOne } from '../config/database-sqlite';

interface Migration {
  id: number;
  filename: string;
  executed_at: Date;
}

export class DatabaseMigrator {
  private migrationsPath: string;

  constructor() {
    this.migrationsPath = join(__dirname, 'migrations');
  }

  // –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã –º–∏–≥—Ä–∞—Ü–∏–π
  async createMigrationsTable(): Promise<void> {
    const sql = `
      CREATE TABLE IF NOT EXISTS migrations (
        id INTEGER PRIMARY KEY AUTOINCREMENT,
        filename TEXT NOT NULL UNIQUE,
        executed_at DATETIME DEFAULT CURRENT_TIMESTAMP
      )
    `;
    await query(sql);
  }

  // –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö –º–∏–≥—Ä–∞—Ü–∏–π
  async getExecutedMigrations(): Promise<Migration[]> {
    const sql = 'SELECT * FROM migrations ORDER BY executed_at';
    const result = await query(sql);
    return result.rows;
  }

  // –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —Ñ–∞–π–ª–æ–≤ –º–∏–≥—Ä–∞—Ü–∏–π
  getMigrationFiles(): string[] {
    const files = [
      '001_create_tables_sqlite.sql',
      '002_seed_data_sqlite.sql',
      '005_sync_tables_sqlite.sql'
    ];
    return files.sort();
  }

  // –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –º–∏–≥—Ä–∞—Ü–∏–∏
  async executeMigration(filename: string): Promise<void> {
    console.log(`Executing migration: ${filename}`);
    
    try {
      // –ß–∏—Ç–∞–µ–º —Ñ–∞–π–ª –º–∏–≥—Ä–∞—Ü–∏–∏
      const migrationPath = join(this.migrationsPath, filename);
      const migrationSQL = readFileSync(migrationPath, 'utf-8');
      
      // –í—ã–ø–æ–ª–Ω—è–µ–º SQL
      await query(migrationSQL);
      
      // –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –≤ —Ç–∞–±–ª–∏—Ü—É –º–∏–≥—Ä–∞—Ü–∏–π
      await query(
        'INSERT INTO migrations (filename) VALUES (?)',
        [filename]
      );
      
      console.log(`‚úÖ Migration ${filename} executed successfully`);
    } catch (error) {
      console.error(`‚ùå Migration ${filename} failed:`, error);
      throw error;
    }
  }

  // –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –≤—Å–µ—Ö –º–∏–≥—Ä–∞—Ü–∏–π
  async runMigrations(): Promise<void> {
    try {
      // –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É –º–∏–≥—Ä–∞—Ü–∏–π
      await this.createMigrationsTable();
      
      // –ü–æ–ª—É—á–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ –º–∏–≥—Ä–∞—Ü–∏–∏
      const executedMigrations = await this.getExecutedMigrations();
      const executedFilenames = executedMigrations.map(m => m.filename);
      
      // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Ñ–∞–π–ª—ã –º–∏–≥—Ä–∞—Ü–∏–π
      const migrationFiles = this.getMigrationFiles();
      
      // –í—ã–ø–æ–ª–Ω—è–µ–º –Ω–µ–∏—Å–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ –º–∏–≥—Ä–∞—Ü–∏–∏
      for (const filename of migrationFiles) {
        if (!executedFilenames.includes(filename)) {
          await this.executeMigration(filename);
        } else {
          console.log(`‚è≠Ô∏è  Migration ${filename} already executed, skipping`);
        }
      }
      
      console.log('üéâ All migrations completed successfully');
    } catch (error) {
      console.error('üí• Migration failed:', error);
      throw error;
    }
  }

  // –û—Ç–∫–∞—Ç –ø–æ—Å–ª–µ–¥–Ω–µ–π –º–∏–≥—Ä–∞—Ü–∏–∏ (–±–∞–∑–æ–≤–∞—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è)
  async rollbackLastMigration(): Promise<void> {
    const lastMigration = await queryOne(
      'SELECT * FROM migrations ORDER BY executed_at DESC LIMIT 1'
    );
    
    if (!lastMigration) {
      console.log('No migrations to rollback');
      return;
    }
    
    // –£–¥–∞–ª—è–µ–º –∑–∞–ø–∏—Å—å –æ –º–∏–≥—Ä–∞—Ü–∏–∏
    await query(
      'DELETE FROM migrations WHERE filename = ?',
      [lastMigration.filename]
    );
    
    console.log(`Rolled back migration: ${lastMigration.filename}`);
    console.log('‚ö†Ô∏è  Note: You may need to manually undo schema changes');
  }
}

export const migrator = new DatabaseMigrator();
