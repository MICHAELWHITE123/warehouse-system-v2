import { RealtimeChannel } from '@supabase/supabase-js';
import { useEffect, useRef, useCallback, useState } from 'react';
import { supabase } from './supabaseAdapter'; // –ò—Å–ø–æ–ª—å–∑—É–µ–º –µ–¥–∏–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä

// –¢–∏–ø—ã –¥–ª—è real-time —Å–æ–±—ã—Ç–∏–π
interface RealtimeEvent {
  type: 'INSERT' | 'UPDATE' | 'DELETE';
  table: string;
  record: any;
  old_record?: any;
  timestamp: string;
}

interface UseSupabaseRealtimeOptions {
  tables?: string[];
  onEquipmentChange?: (event: RealtimeEvent) => void;
  onShipmentChange?: (event: RealtimeEvent) => void;
  onCategoryChange?: (event: RealtimeEvent) => void;
  onLocationChange?: (event: RealtimeEvent) => void;
  onStackChange?: (event: RealtimeEvent) => void;
  onAnyChange?: (event: RealtimeEvent) => void;
  autoReconnect?: boolean;
}

// –û—Å–Ω–æ–≤–Ω–æ–π —Ö—É–∫ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å Supabase Realtime
export function useSupabaseRealtime(options: UseSupabaseRealtimeOptions = {}) {
  const {
    tables = ['equipment', 'shipments', 'categories', 'locations', 'equipment_stacks'],
    onEquipmentChange,
    onShipmentChange,
    onCategoryChange,
    onLocationChange,
    onStackChange,
    onAnyChange,
    autoReconnect = true
  } = options;

  const [isConnected, setIsConnected] = useState(false);
  const [connectionError, setConnectionError] = useState<string | null>(null);
  const [lastEvent, setLastEvent] = useState<RealtimeEvent | null>(null);
  
  const channelsRef = useRef<RealtimeChannel[]>([]);
  const isConnectingRef = useRef(false);
  const isDisconnectingRef = useRef(false);
  const hasInitializedRef = useRef(false);

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–±—ã—Ç–∏–π
  const handleRealtimeEvent = useCallback((payload: any) => {
    const event: RealtimeEvent = {
      type: payload.eventType,
      table: payload.table,
      record: payload.new || payload.old,
      old_record: payload.old,
      timestamp: new Date().toISOString()
    };

    console.log('üì® Supabase Realtime event:', event);
    
    setLastEvent(event);

    // –í—ã–∑—ã–≤–∞–µ–º —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
    switch (event.table) {
      case 'equipment':
        onEquipmentChange?.(event);
        break;
      case 'shipments':
        onShipmentChange?.(event);
        break;
      case 'categories':
        onCategoryChange?.(event);
        break;
      case 'locations':
        onLocationChange?.(event);
        break;
      case 'equipment_stacks':
        onStackChange?.(event);
        break;
    }

    // –û–±—â–∏–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫
    onAnyChange?.(event);
  }, [onEquipmentChange, onShipmentChange, onCategoryChange, onLocationChange, onStackChange, onAnyChange]);

  // –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ —Ç–∞–±–ª–∏—Ü–∞–º
  const connect = useCallback(() => {
    if (isConnectingRef.current || isDisconnectingRef.current || isConnected) {
      return; // –ü—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–∞–µ–º –ø–æ–≤—Ç–æ—Ä–Ω—ã–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
    }

    isConnectingRef.current = true;
    console.log('üîó Connecting to Supabase Realtime for tables:', tables);

    try {
      // –û—Ç–∫–ª—é—á–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –∫–∞–Ω–∞–ª—ã
      channelsRef.current.forEach(channel => {
        supabase.removeChannel(channel);
      });
      channelsRef.current = [];

      // –°–æ–∑–¥–∞–µ–º –∫–∞–Ω–∞–ª—ã –¥–ª—è –∫–∞–∂–¥–æ–π —Ç–∞–±–ª–∏—Ü—ã
      tables.forEach(table => {
        const channel = supabase
          .channel(`public:${table}`)
          .on(
            'postgres_changes',
            {
              event: '*', // –°–ª—É—à–∞–µ–º –≤—Å–µ —Å–æ–±—ã—Ç–∏—è (INSERT, UPDATE, DELETE)
              schema: 'public',
              table: table
            },
            (payload) => {
              console.log(`üì® Realtime event for table ${table}:`, payload);
              console.log(`üîç Payload type:`, typeof payload);
              console.log(`üîç Payload keys:`, Object.keys(payload || {}));
              
              // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º payload –≤ —Ñ–æ—Ä–º–∞—Ç, –æ–∂–∏–¥–∞–µ–º—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞–º–∏
              const event = {
                eventType: payload.eventType,
                table: payload.table,
                new: payload.new,
                old: payload.old,
                timestamp: new Date().toISOString()
              };
              
              console.log(`üîç Transformed event:`, event);
              
              // –í—ã–∑—ã–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–±—ã—Ç–∏—è
              console.log(`üîç Calling handleRealtimeEvent for table ${table}`);
              handleRealtimeEvent(event);
            }
          )
          .subscribe((status) => {
            console.log(`üì° Channel ${table} status:`, status);
            
            if (status === 'SUBSCRIBED') {
              setIsConnected(true);
              setConnectionError(null);
              isConnectingRef.current = false;
            } else if (status === 'CHANNEL_ERROR' || status === 'TIMED_OUT') {
              setIsConnected(false);
              setConnectionError(`Connection error for table ${table}`);
              isConnectingRef.current = false;
              
              if (autoReconnect) {
                setTimeout(() => connect(), 5000);
              }
            }
          });

        channelsRef.current.push(channel);
      });

    } catch (error) {
      console.error('‚ùå Failed to connect to Supabase Realtime:', error);
      setConnectionError(error instanceof Error ? error.message : 'Connection failed');
      isConnectingRef.current = false;
    }
  }, [tables, handleRealtimeEvent, autoReconnect, isConnected]);

  // –û—Ç–∫–ª—é—á–µ–Ω–∏–µ
  const disconnect = useCallback(() => {
    if (isDisconnectingRef.current || !isConnected) {
      return; // –ü—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–∞–µ–º –ø–æ–≤—Ç–æ—Ä–Ω—ã–µ –æ—Ç–∫–ª—é—á–µ–Ω–∏—è
    }

    isDisconnectingRef.current = true;
    console.log('üîå Disconnecting from Supabase Realtime');
    
    channelsRef.current.forEach(channel => {
      supabase.removeChannel(channel);
    });
    channelsRef.current = [];
    
    setIsConnected(false);
    setConnectionError(null);
    isDisconnectingRef.current = false;
  }, [isConnected]);

  // –ê–≤—Ç–æ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏
  useEffect(() => {
    if (!isConnected && !isConnectingRef.current && !hasInitializedRef.current) {
      hasInitializedRef.current = true;
      connect();
    }

    // –û—Ç–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ —Ä–∞–∑–º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏
    return () => {
      if (isConnected) {
        disconnect();
      }
    };
  }, []); // –ü—É—Å—Ç–æ–π –º–∞—Å—Å–∏–≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π - –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ –ø—Ä–∏ –º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –¥—Ä—É–≥–∏—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤ —á–µ—Ä–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–µ –≤ –ë–î
  const notifyChange = useCallback(async (table: string, action: 'INSERT' | 'UPDATE' | 'DELETE', data: any) => {
    try {
      // –î–ª—è Supabase Realtime —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø—Ä–æ–∏—Å—Ö–æ–¥—è—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ 
      // –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –≤ —Ç–∞–±–ª–∏—Ü–µ, –Ω–æ –º—ã –º–æ–∂–µ–º —Ç–∞–∫–∂–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å
      // —Å–ø–µ—Ü–∏–∞–ª—å–Ω—É—é —Ç–∞–±–ª–∏—Ü—É –¥–ª—è –∫–∞—Å—Ç–æ–º–Ω—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
      const { error } = await supabase
        .from('realtime_events') // –û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–∞—è —Ç–∞–±–ª–∏—Ü–∞ –¥–ª—è –∫–∞—Å—Ç–æ–º–Ω—ã—Ö —Å–æ–±—ã—Ç–∏–π
        .insert({
          table_name: table,
          event_type: action,
          event_data: data,
          created_at: new Date().toISOString()
        });

      if (error) {
        console.warn('Failed to log realtime event:', error);
        // –ù–µ —Ñ–µ–π–ª–∏–º, —Ç.–∫. –æ—Å–Ω–æ–≤–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è –≤—Å–µ —Ä–∞–≤–Ω–æ –ø—Ä–æ–π–¥—É—Ç —á–µ—Ä–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ —Ç–∞–±–ª–∏—Ü–∞—Ö
      }

      return true;
    } catch (error) {
      console.error('Failed to notify change:', error);
      return false;
    }
  }, []);

  return {
    isConnected,
    connectionError,
    lastEvent,
    connect,
    disconnect,
    notifyChange,
    supabase
  };
}

// –•–µ–ª–ø–µ—Ä—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–º–∏ —Ç–∞–±–ª–∏—Ü–∞–º–∏
export function useEquipmentRealtime() {
  return useSupabaseRealtime({
    tables: ['equipment'],
    onEquipmentChange: (event) => {
      console.log('üì¶ Equipment realtime update:', event);
    }
  });
}

export function useShipmentRealtime() {
  return useSupabaseRealtime({
    tables: ['shipments'],
    onShipmentChange: (event) => {
      console.log('üöö Shipment realtime update:', event);
    }
  });
}

// –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º –µ–¥–∏–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –∫–ª–∏–µ–Ω—Ç–∞
export { supabase as supabaseClient };
