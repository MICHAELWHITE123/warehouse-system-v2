import { createClient, SupabaseClient, RealtimeChannel } from '@supabase/supabase-js';
import { useEffect, useRef, useCallback, useState } from 'react';

// –¢–∏–ø—ã –¥–ª—è real-time —Å–æ–±—ã—Ç–∏–π
interface RealtimeEvent {
  type: 'INSERT' | 'UPDATE' | 'DELETE';
  table: string;
  record: any;
  old_record?: any;
  timestamp: string;
}

interface UseSupabaseRealtimeOptions {
  tables?: string[];
  onEquipmentChange?: (event: RealtimeEvent) => void;
  onShipmentChange?: (event: RealtimeEvent) => void;
  onCategoryChange?: (event: RealtimeEvent) => void;
  onLocationChange?: (event: RealtimeEvent) => void;
  onStackChange?: (event: RealtimeEvent) => void;
  onAnyChange?: (event: RealtimeEvent) => void;
  autoReconnect?: boolean;
}

// –°–æ–∑–¥–∞–µ–º –∫–ª–∏–µ–Ω—Ç Supabase —Å –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–º–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏ –¥–ª—è Realtime
export function createOptimizedSupabaseClient() {
  const supabaseUrl = import.meta.env.VITE_SUPABASE_URL;
  const supabaseAnonKey = import.meta.env.VITE_SUPABASE_ANON_KEY;

  if (!supabaseUrl || !supabaseAnonKey) {
    throw new Error('Missing Supabase environment variables');
  }

  return createClient(supabaseUrl, supabaseAnonKey, {
    realtime: {
      params: {
        eventsPerSecond: 10, // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–±—ã—Ç–∏–π
        heartbeatIntervalMs: 30000, // Heartbeat –∫–∞–∂–¥—ã–µ 30 —Å–µ–∫—É–Ω–¥
        reconnectAfterMs: (tries: number) => {
          // –≠–∫—Å–ø–æ–Ω–µ–Ω—Ü–∏–∞–ª—å–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
          return Math.min(tries * 1000, 10000);
        }
      }
    }
  });
}

// –û—Å–Ω–æ–≤–Ω–æ–π —Ö—É–∫ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å Supabase Realtime
export function useSupabaseRealtime(options: UseSupabaseRealtimeOptions = {}) {
  const {
    tables = ['equipment', 'shipments', 'categories', 'locations', 'equipment_stacks'],
    onEquipmentChange,
    onShipmentChange,
    onCategoryChange,
    onLocationChange,
    onStackChange,
    onAnyChange,
    autoReconnect = true
  } = options;

  const [isConnected, setIsConnected] = useState(false);
  const [connectionError, setConnectionError] = useState<string | null>(null);
  const [lastEvent, setLastEvent] = useState<RealtimeEvent | null>(null);
  
  const supabaseRef = useRef<SupabaseClient | null>(null);
  const channelsRef = useRef<RealtimeChannel[]>([]);

  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Supabase –∫–ª–∏–µ–Ω—Ç–∞
  useEffect(() => {
    try {
      supabaseRef.current = createOptimizedSupabaseClient();
    } catch (error) {
      setConnectionError(error instanceof Error ? error.message : 'Failed to initialize Supabase');
    }
  }, []);

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–±—ã—Ç–∏–π
  const handleRealtimeEvent = useCallback((payload: any) => {
    const event: RealtimeEvent = {
      type: payload.eventType,
      table: payload.table,
      record: payload.new || payload.old,
      old_record: payload.old,
      timestamp: new Date().toISOString()
    };

    console.log('üì® Supabase Realtime event:', event);
    
    setLastEvent(event);

    // –í—ã–∑—ã–≤–∞–µ–º —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
    switch (event.table) {
      case 'equipment':
        onEquipmentChange?.(event);
        break;
      case 'shipments':
        onShipmentChange?.(event);
        break;
      case 'categories':
        onCategoryChange?.(event);
        break;
      case 'locations':
        onLocationChange?.(event);
        break;
      case 'equipment_stacks':
        onStackChange?.(event);
        break;
    }

    // –û–±—â–∏–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫
    onAnyChange?.(event);
  }, [onEquipmentChange, onShipmentChange, onCategoryChange, onLocationChange, onStackChange, onAnyChange]);

  // –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ —Ç–∞–±–ª–∏—Ü–∞–º
  const connect = useCallback(() => {
    if (!supabaseRef.current) {
      setConnectionError('Supabase client not initialized');
      return;
    }

    // –û—Ç–∫–ª—é—á–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –∫–∞–Ω–∞–ª—ã
    channelsRef.current.forEach(channel => {
      supabaseRef.current?.removeChannel(channel);
    });
    channelsRef.current = [];

    console.log('üîó Connecting to Supabase Realtime for tables:', tables);

    try {
      // –°–æ–∑–¥–∞–µ–º –∫–∞–Ω–∞–ª—ã –¥–ª—è –∫–∞–∂–¥–æ–π —Ç–∞–±–ª–∏—Ü—ã
      tables.forEach(table => {
        const channel = supabaseRef.current!
          .channel(`public:${table}`)
          .on(
            'postgres_changes',
            {
              event: '*', // –°–ª—É—à–∞–µ–º –≤—Å–µ —Å–æ–±—ã—Ç–∏—è (INSERT, UPDATE, DELETE)
              schema: 'public',
              table: table
            },
            handleRealtimeEvent
          )
          .subscribe((status) => {
            console.log(`üì° Channel ${table} status:`, status);
            
            if (status === 'SUBSCRIBED') {
              setIsConnected(true);
              setConnectionError(null);
            } else if (status === 'CHANNEL_ERROR' || status === 'TIMED_OUT') {
              setIsConnected(false);
              setConnectionError(`Connection error for table ${table}`);
              
              if (autoReconnect) {
                setTimeout(() => connect(), 5000);
              }
            }
          });

        channelsRef.current.push(channel);
      });

    } catch (error) {
      console.error('‚ùå Failed to connect to Supabase Realtime:', error);
      setConnectionError(error instanceof Error ? error.message : 'Connection failed');
    }
  }, [tables, handleRealtimeEvent, autoReconnect]);

  // –û—Ç–∫–ª—é—á–µ–Ω–∏–µ
  const disconnect = useCallback(() => {
    console.log('üîå Disconnecting from Supabase Realtime');
    
    channelsRef.current.forEach(channel => {
      supabaseRef.current?.removeChannel(channel);
    });
    channelsRef.current = [];
    
    setIsConnected(false);
    setConnectionError(null);
  }, []);

  // –ê–≤—Ç–æ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏
  useEffect(() => {
    if (supabaseRef.current) {
      connect();
    }

    // –û—Ç–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ —Ä–∞–∑–º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏
    return () => {
      disconnect();
    };
  }, [connect, disconnect]);

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –¥—Ä—É–≥–∏—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤ —á–µ—Ä–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–µ –≤ –ë–î
  const notifyChange = useCallback(async (table: string, action: 'INSERT' | 'UPDATE' | 'DELETE', data: any) => {
    if (!supabaseRef.current) {
      throw new Error('Supabase client not initialized');
    }

    try {
      // –î–ª—è Supabase Realtime —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø—Ä–æ–∏—Å—Ö–æ–¥—è—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ 
      // –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –≤ —Ç–∞–±–ª–∏—Ü–µ, –Ω–æ –º—ã –º–æ–∂–µ–º —Ç–∞–∫–∂–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å
      // —Å–ø–µ—Ü–∏–∞–ª—å–Ω—É—é —Ç–∞–±–ª–∏—Ü—É –¥–ª—è –∫–∞—Å—Ç–æ–º–Ω—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
      const { error } = await supabaseRef.current
        .from('realtime_events') // –û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–∞—è —Ç–∞–±–ª–∏—Ü–∞ –¥–ª—è –∫–∞—Å—Ç–æ–º–Ω—ã—Ö —Å–æ–±—ã—Ç–∏–π
        .insert({
          table_name: table,
          event_type: action,
          event_data: data,
          created_at: new Date().toISOString()
        });

      if (error) {
        console.warn('Failed to log realtime event:', error);
        // –ù–µ —Ñ–µ–π–ª–∏–º, —Ç.–∫. –æ—Å–Ω–æ–≤–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è –≤—Å–µ —Ä–∞–≤–Ω–æ –ø—Ä–æ–π–¥—É—Ç —á–µ—Ä–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ —Ç–∞–±–ª–∏—Ü–∞—Ö
      }

      return true;
    } catch (error) {
      console.error('Failed to notify change:', error);
      return false;
    }
  }, []);

  return {
    isConnected,
    connectionError,
    lastEvent,
    connect,
    disconnect,
    notifyChange,
    supabase: supabaseRef.current
  };
}

// –•–µ–ª–ø–µ—Ä—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–º–∏ —Ç–∞–±–ª–∏—Ü–∞–º–∏
export function useEquipmentRealtime() {
  return useSupabaseRealtime({
    tables: ['equipment'],
    onEquipmentChange: (event) => {
      console.log('üì¶ Equipment realtime update:', event);
    }
  });
}

export function useShipmentRealtime() {
  return useSupabaseRealtime({
    tables: ['shipments'],
    onShipmentChange: (event) => {
      console.log('üöö Shipment realtime update:', event);
    }
  });
}

// –≠–∫—Å–ø–æ—Ä—Ç –≥–æ—Ç–æ–≤–æ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –¥—Ä—É–≥–∏—Ö —á–∞—Å—Ç—è—Ö –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
export const supabaseClient = createOptimizedSupabaseClient();
