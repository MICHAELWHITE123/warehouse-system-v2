import { useState, useEffect } from "react";
import { Navigation } from "./components/Navigation";
import { Dashboard } from "./components/Dashboard";
import { EquipmentList, Equipment } from "./components/EquipmentList";
import { EquipmentForm } from "./components/EquipmentForm";
import { EquipmentDetails } from "./components/EquipmentDetails";
import { CategoryManagement } from "./components/CategoryManagement";
import { LocationManagement } from "./components/LocationManagement";
import { StackManagement, EquipmentStack } from "./components/StackManagement";
import { StackForm } from "./components/StackForm";
import { ShipmentList } from "./components/ShipmentList";
import { ShipmentForm } from "./components/ShipmentForm";
import { AuthForm } from "./components/AuthForm";
import { AdminPanel } from "./components/AdminPanel";
import { SyncNotifications } from "./components/SyncNotifications";
import { Toaster } from "./components/ui/sonner";
import { toast } from "sonner";

// –ò–º–ø–æ—Ä—Ç—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö
import { ExtendedShipment, ActiveView } from "./types";
import { calculateStats } from "./utils/statistics";
import { useTheme } from "./hooks/useTheme";
import { useAuth } from "./hooks/useAuth";
import { useDatabase, useEquipment, useCategories, useLocations, useStacks, useShipments, useStatistics } from "./hooks/useDatabase";
import { useRealTimeSync } from "./hooks/useRealTimeSync";
import { 
  adaptEquipmentFromDB, 
  adaptStackFromDB, 
  adaptShipmentFromDB,
  adaptEquipmentToDB,
  adaptStackToDB,
  adaptShipmentToDB,
  adaptCategoriesFromDB,
  adaptLocationsFromDB
} from "./adapters/databaseAdapter";
import { stackService } from "./database/services";

// –¢–∏–ø –¥–ª—è realtime —Å–æ–±—ã—Ç–∏–π
interface RealTimeEvent {
  type: string;
  action: 'create' | 'update' | 'delete';
  data: any;
  timestamp: string;
}

export default function App() {
  const { user, handleLogin, handleLogout } = useAuth();
  const { isDarkMode, toggleTheme } = useTheme();
  
  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
  const { isInitialized, error: dbError } = useDatabase();
  
  // –•—É–∫–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –¥–∞–Ω–Ω—ã–º–∏ –∏–∑ –ë–î
  const { equipment: dbEquipment, createEquipment, updateEquipment, deleteEquipment, loadEquipment } = useEquipment();
  const { categories: dbCategories, loadCategories } = useCategories();
  const { locations: dbLocations, loadLocations } = useLocations();
  const { stacks: dbStacks, createStack, updateStack, deleteStack, loadStacks } = useStacks();
  const { shipments: dbShipments, createShipmentWithDetails, updateShipment, deleteShipment, loadShipments } = useShipments();
  const { stats: dbStats } = useStatistics();
  
  const [activeView, setActiveView] = useState<ActiveView>("dashboard");
  const [selectedEquipment, setSelectedEquipment] = useState<Equipment | null>(null);
  const [isFormVisible, setIsFormVisible] = useState(false);
  const [isEquipmentDetailsVisible, setIsEquipmentDetailsVisible] = useState(false); // –°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–µ—Ç–∞–ª–µ–π
  
  // –°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è —Å—Ç–µ–∫–æ–≤
  const [selectedStack, setSelectedStack] = useState<EquipmentStack | null>(null);
  const [isStackFormVisible, setIsStackFormVisible] = useState(false);
  
  // –°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –æ—Ç–≥—Ä—É–∑–æ–∫
  const [selectedShipment, setSelectedShipment] = useState<ExtendedShipment | null>(null);
  const [isShipmentFormVisible, setIsShipmentFormVisible] = useState(false);

  // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –ë–î –≤ —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
  const equipment: Equipment[] = dbEquipment.map(adaptEquipmentFromDB);
  const categories: string[] = adaptCategoriesFromDB(dbCategories);
  const locations: string[] = adaptLocationsFromDB(dbLocations);
  
  console.log('=== App.tsx Debug ===');
  console.log('dbStacks from database:', dbStacks);
  
  const stacks: EquipmentStack[] = dbStacks.map(adaptStackFromDB);
  
  console.log('stacks after adaptation:', stacks);
  console.log('dbShipments from database:', dbShipments);
  
  const shipments: ExtendedShipment[] = dbShipments.map(adaptShipmentFromDB);
  
  console.log('shipments after adaptation:', shipments);
  console.log('=====================');

  // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏–∑ –ë–î –∏–ª–∏ —Ä–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –ª–æ–∫–∞–ª—å–Ω–æ –∫–∞–∫ fallback
  const stats = dbStats || calculateStats(equipment, stacks, shipments);

  const notificationCount = stats.maintenanceEquipment;

  // Real-time —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è UI
  const { isConnected: realtimeConnected, lastUpdate } = useRealTimeSync({
    onEquipmentUpdate: (event: RealTimeEvent) => {
      console.log('üîÑ Real-time equipment update received:', event);
      // –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ realtime —Å–æ–±—ã—Ç–∏—è
      if (loadEquipment) {
        console.log('üîÑ Refreshing equipment data...');
        loadEquipment();
      }
    },
    onShipmentUpdate: (event: RealTimeEvent) => {
      console.log('üîÑ Real-time shipment update received:', event);
      // –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ—Å—Ç–∞–≤–æ–∫ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ realtime —Å–æ–±—ã—Ç–∏—è
      if (loadShipments) {
        console.log('üîÑ Refreshing shipment data...');
        loadShipments();
      }
    },
    onStackUpdate: (event: RealTimeEvent) => {
      console.log('üîÑ Real-time stack update received:', event);
      // –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ —Å—Ç–µ–∫–æ–≤ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ realtime —Å–æ–±—ã—Ç–∏—è
      if (loadStacks) {
        console.log('üîÑ Refreshing stack data...');
        loadStacks();
      }
    },
    onCategoryUpdate: (event: RealTimeEvent) => {
      console.log('üîÑ Real-time category update received:', event);
      // –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–π –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ realtime —Å–æ–±—ã—Ç–∏—è
      if (loadCategories) {
        console.log('üîÑ Refreshing category data...');
        loadCategories();
      }
    },
    onLocationUpdate: (event: RealTimeEvent) => {
      console.log('üîÑ Real-time location update received:', event);
      // –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –ª–æ–∫–∞—Ü–∏–π –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ realtime —Å–æ–±—ã—Ç–∏—è
      if (loadLocations) {
        console.log('üîÑ Refreshing location data...');
        loadLocations();
      }
    },
    onAnyUpdate: (event: RealTimeEvent) => {
      console.log('üîÑ Real-time update received:', event);
      // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
      toast.success(`–î–∞–Ω–Ω—ã–µ –æ–±–Ω–æ–≤–ª–µ–Ω—ã: ${event.type}`);
    }
  });

  // –õ–æ–≥–∏—Ä—É–µ–º —Å—Ç–∞—Ç—É—Å realtime –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
  useEffect(() => {
    console.log('üîÑ Realtime connection status:', realtimeConnected);
    if (lastUpdate) {
      console.log('üîÑ Last realtime update:', lastUpdate);
    }
  }, [realtimeConnected, lastUpdate]);

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è
  const handleAddEquipment = async (newEquipment: Omit<Equipment, 'id'>) => {
    try {
      const equipmentData = adaptEquipmentToDB(newEquipment, dbCategories, dbLocations);
      await createEquipment(equipmentData);
      setIsFormVisible(false);
      toast.success("–û–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ");
    } catch (error) {
      toast.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è");
      console.error(error);
    }
  };

  const handleEditEquipment = async (updatedEquipment: Omit<Equipment, 'id'>) => {
    if (selectedEquipment) {
      try {
        const dbEquipmentItem = dbEquipment.find(eq => eq.uuid === selectedEquipment.id);
        if (dbEquipmentItem) {
          const equipmentData = adaptEquipmentToDB(updatedEquipment, dbCategories, dbLocations, selectedEquipment.id);
          await updateEquipment({ ...equipmentData, id: dbEquipmentItem.id });
          
          // –û–±–Ω–æ–≤–ª—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω–æ–µ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ —Å –Ω–æ–≤—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
          const updatedEquipmentWithId = { ...updatedEquipment, id: selectedEquipment.id };
          setSelectedEquipment(updatedEquipmentWithId);
          
          setIsFormVisible(false);
          // –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –¥–µ—Ç–∞–ª—è–º, –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –±—ã–ª —Ç–∞–º
          if (isEquipmentDetailsVisible) {
            setActiveView("view-equipment");
          } else {
            setSelectedEquipment(null);
            setActiveView("equipment");
          }
          
          toast.success("–û–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ");
        }
      } catch (error) {
        toast.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è");
        console.error(error);
      }
    }
  };

  const handleViewEquipment = (item: Equipment) => {
    setSelectedEquipment(item);
    setIsEquipmentDetailsVisible(true);
    setActiveView("view-equipment");
  };

  const handleEquipmentDetailsBack = () => {
    setIsEquipmentDetailsVisible(false);
    setSelectedEquipment(null);
    setActiveView("equipment");
  };

  const handleEditEquipmentClick = (item: Equipment) => {
    setSelectedEquipment(item);
    setIsFormVisible(true);
    setIsEquipmentDetailsVisible(false); // –°–∫—Ä—ã–≤–∞–µ–º –¥–µ—Ç–∞–ª–∏ –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏
    setActiveView("edit-equipment");
  };

  const handleDeleteEquipment = async (equipmentId: string) => {
    try {
      const dbEquipmentItem = dbEquipment.find(eq => eq.uuid === equipmentId);
      if (dbEquipmentItem) {
        await deleteEquipment(dbEquipmentItem.id);
        toast.success("–û–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–æ");
      }
    } catch (error) {
      toast.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è");
      console.error(error);
    }
  };

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è —Å—Ç–µ–∫–æ–≤
  const handleAddStack = async (newStack: Omit<EquipmentStack, 'id'>) => {
    try {
      const stackData = adaptStackToDB(newStack);
      await createStack(stackData);
      
      // –ü–æ—Å–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è —Å—Ç–µ–∫–∞, –ø–æ–ª—É—á–∞–µ–º –µ–≥–æ –∏–∑ –ë–î –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è ID
      const dbStack = stackService.getStackByUuid(stackData.uuid);
      
      // –î–æ–±–∞–≤–ª—è–µ–º –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ –≤ —Å—Ç–µ–∫
      if (newStack.equipmentIds.length > 0 && dbStack) {
        const equipmentDbIds = newStack.equipmentIds
          .map(uuid => dbEquipment.find(eq => eq.uuid === uuid)?.id)
          .filter(Boolean) as number[];
        
        if (equipmentDbIds.length > 0) {
          stackService.addEquipmentToStack(dbStack.id, equipmentDbIds);
        }
      }
      
      setIsStackFormVisible(false);
      toast.success("–°—Ç–µ–∫ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω");
    } catch (error) {
      toast.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å—Ç–µ–∫–∞");
      console.error(error);
    }
  };

  const handleEditStack = async (updatedStack: Omit<EquipmentStack, 'id'>) => {
    if (selectedStack) {
      try {
        const dbStackItem = dbStacks.find(stack => stack.uuid === selectedStack.id);
        if (dbStackItem) {
          const stackData = adaptStackToDB(updatedStack, selectedStack.id);
          await updateStack({ ...stackData, id: dbStackItem.id });
          
          // –û–±–Ω–æ–≤–ª—è–µ–º –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ –≤ —Å—Ç–µ–∫–µ
          const equipmentDbIds = updatedStack.equipmentIds
            .map(uuid => dbEquipment.find(eq => eq.uuid === uuid)?.id)
            .filter(Boolean) as number[];
          
          stackService.replaceStackEquipment(dbStackItem.id, equipmentDbIds);
          
          setSelectedStack(null);
          setIsStackFormVisible(false);
          toast.success("–°—Ç–µ–∫ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω");
        }
      } catch (error) {
        toast.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å—Ç–µ–∫–∞");
        console.error(error);
      }
    }
  };

  const handleEditStackClick = (stack: EquipmentStack) => {
    setSelectedStack(stack);
    setIsStackFormVisible(true);
    setActiveView("edit-stack");
  };

  const handleDeleteStack = async (stackId: string) => {
    try {
      const dbStackItem = dbStacks.find(stack => stack.uuid === stackId);
      if (dbStackItem) {
        await deleteStack(dbStackItem.id);
        toast.success("–°—Ç–µ–∫ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω");
      }
    } catch (error) {
      toast.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å—Ç–µ–∫–∞");
      console.error(error);
    }
  };

  const handleCreateStack = () => {
    setSelectedStack(null);
    setIsStackFormVisible(true);
    setActiveView("add-stack");
  };

  const handleStackFormCancel = () => {
    setIsStackFormVisible(false);
    setSelectedStack(null);
    setActiveView("stacks");
  };

  const handleStacksChange = () => {
    // –≠—Ç–æ—Ç –º–µ—Ç–æ–¥ –±–æ–ª—å—à–µ –Ω–µ –Ω—É–∂–µ–Ω, —Ç–∞–∫ –∫–∞–∫ –º—ã —Ä–∞–±–æ—Ç–∞–µ–º –Ω–∞–ø—Ä—è–º—É—é —Å –ë–î
    console.log("StacksChange called but ignored - using database directly");
  };

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –æ—Ç–≥—Ä—É–∑–æ–∫
  const handleAddShipment = async (newShipment: Omit<ExtendedShipment, 'id'>) => {
    try {
      console.log('=== handleAddShipment Debug ===');
      console.log('newShipment from form:', newShipment);
      console.log('newShipment.equipment:', newShipment.equipment);
      console.log('newShipment.stacks:', newShipment.stacks);
      console.log('newShipment.rental:', newShipment.rental);
      console.log('newShipment.checklist:', newShipment.checklist);
      
      // –°–æ–∑–¥–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ë–î, –≤–∫–ª—é—á–∞—è —Å–≤—è–∑–∞–Ω–Ω—ã–µ –∑–∞–ø–∏—Å–∏
      const fullShipmentData = {
        uuid: Date.now().toString(),
        number: newShipment.number,
        date: newShipment.date,
        recipient: newShipment.recipient,
        recipient_address: newShipment.recipientAddress,
        status: newShipment.status,
        responsible_person: newShipment.responsiblePerson,
        total_items: newShipment.totalItems,
        comments: newShipment.comments,
        delivered_at: newShipment.deliveredAt,
        equipment: newShipment.equipment,
        stacks: newShipment.stacks,
        rental: newShipment.rental,
        checklist: newShipment.checklist
      };
      
      console.log('fullShipmentData for DB:', fullShipmentData);
      
      // –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ–≤—ã–π –º–µ—Ç–æ–¥ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –æ—Ç–≥—Ä—É–∑–∫–∏ —Å–æ –≤—Å–µ–º–∏ —Å–≤—è–∑–∞–Ω–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
      await createShipmentWithDetails(fullShipmentData);
      
      setIsShipmentFormVisible(false);
      toast.success("–û—Ç–≥—Ä—É–∑–∫–∞ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞");
      console.log('===============================');
    } catch (error) {
      toast.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –æ—Ç–≥—Ä—É–∑–∫–∏");
      console.error(error);
    }
  };

  const handleEditShipment = async (updatedShipment: Omit<ExtendedShipment, 'id'>) => {
    if (selectedShipment) {
      try {
        const dbShipmentItem = dbShipments.find(shipment => shipment.uuid === selectedShipment.id);
        if (dbShipmentItem) {
          const shipmentData = adaptShipmentToDB(updatedShipment, selectedShipment.id);
          await updateShipment({ ...shipmentData, id: dbShipmentItem.id });
          setSelectedShipment(null);
          setIsShipmentFormVisible(false);
          toast.success("–û—Ç–≥—Ä—É–∑–∫–∞ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∞");
        }
      } catch (error) {
        toast.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –æ—Ç–≥—Ä—É–∑–∫–∏");
        console.error(error);
      }
    }
  };

  const handleViewShipment = (_shipment: ExtendedShipment) => {
    // –ü—Ä–æ—Å–º–æ—Ç—Ä –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è –≤ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–µ ShipmentList
  };

  const handleEditShipmentClick = (shipment: ExtendedShipment) => {
    setSelectedShipment(shipment);
    setIsShipmentFormVisible(true);
    setActiveView("edit-shipment");
  };

  const handleDeleteShipment = async (shipmentId: string) => {
    try {
      const dbShipmentItem = dbShipments.find(shipment => shipment.uuid === shipmentId);
      if (dbShipmentItem) {
        await deleteShipment(dbShipmentItem.id);
        toast.success("–û—Ç–≥—Ä—É–∑–∫–∞ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞");
      }
    } catch (error) {
      toast.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –æ—Ç–≥—Ä—É–∑–∫–∏");
      console.error(error);
    }
  };

  const handleCreateShipment = () => {
    setSelectedShipment(null);
    setIsShipmentFormVisible(true);
    setActiveView("add-shipment");
  };

  const handleShipmentFormCancel = () => {
    setIsShipmentFormVisible(false);
    setSelectedShipment(null);
    setActiveView("shipments");
  };

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≤—ã–±–æ—Ä–∞ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è –∏–∑ Dashboard QR —Å–∫–∞–Ω–µ—Ä–∞
  const handleDashboardEquipmentSelect = (equipment: Equipment) => {
    handleViewEquipment(equipment);
  };

  // –û–±—â–∏–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
  const handleViewChange = (view: string) => {
    const typedView = view as ActiveView;
    setActiveView(typedView);
    if (view === "add-equipment") {
      setSelectedEquipment(null);
      setIsFormVisible(true);
      setIsShipmentFormVisible(false);
      setIsStackFormVisible(false);
    } else if (view === "add-stack") {
      setSelectedStack(null);
      setIsStackFormVisible(true);
      setIsFormVisible(false);
      setIsShipmentFormVisible(false);
    } else {
      setIsFormVisible(false);
      setSelectedEquipment(null);
      setIsShipmentFormVisible(false);
      setSelectedShipment(null);
      setIsStackFormVisible(false);
      setSelectedStack(null);
    }
  };

  const handleFormCancel = () => {
    setIsFormVisible(false);
    if (isEquipmentDetailsVisible) {
      // –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –±—ã–ª –≤ –¥–µ—Ç–∞–ª—è—Ö, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è —Ç—É–¥–∞
      setActiveView("view-equipment");
    } else {
      // –ò–Ω–∞—á–µ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ —Å–ø–∏—Å–∫—É
      setSelectedEquipment(null);
      setActiveView("equipment");
    }
  };

  const handleCategoriesChange = async () => {
    // –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –∫–∞—Ç–µ–≥–æ—Ä–∏–π –ø–æ—Å–ª–µ –∏–∑–º–µ–Ω–µ–Ω–∏–π
    try {
      // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –±–∞–∑—ã
      window.location.reload();
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–π:', error);
    }
  };

  const renderContent = () => {
    if (isEquipmentDetailsVisible && selectedEquipment) {
      return (
        <EquipmentDetails
          equipment={selectedEquipment}
          onBack={handleEquipmentDetailsBack}
          onEdit={handleEditEquipmentClick}
        />
      );
    }

    if (isFormVisible) {
      return (
        <EquipmentForm
          equipment={selectedEquipment || undefined}
          onSave={selectedEquipment ? handleEditEquipment : handleAddEquipment}
          onCancel={handleFormCancel}
          isEditing={!!selectedEquipment}
          categories={categories}
          locations={locations}
        />
      );
    }

    if (isStackFormVisible) {
      return (
        <StackForm
          stack={selectedStack || undefined}
          equipment={equipment}
          onSave={selectedStack ? handleEditStack : handleAddStack}
          onCancel={handleStackFormCancel}
          isEditing={!!selectedStack}
        />
      );
    }

    if (isShipmentFormVisible) {
      return (
        <ShipmentForm
          shipment={selectedShipment || undefined}
          equipment={equipment}
          stacks={stacks}
          onSave={selectedShipment ? handleEditShipment : handleAddShipment}
          onCancel={handleShipmentFormCancel}
          onEquipmentView={handleViewEquipment}
          isEditing={!!selectedShipment}
        />
      );
    }

    switch (activeView) {
      case "dashboard":
        return <Dashboard stats={stats} onEquipmentSelect={handleDashboardEquipmentSelect} />;
      case "equipment":
        return (
          <EquipmentList
            equipment={equipment}
            onEdit={handleEditEquipmentClick}
            onView={handleViewEquipment}
            onDelete={handleDeleteEquipment}
          />
        );
      case "stacks":
        return (
          <StackManagement
            stacks={stacks}
            equipment={equipment}
            onStacksChange={handleStacksChange}
            onCreateStack={handleCreateStack}
            onEditStack={handleEditStackClick}
            onDeleteStack={handleDeleteStack}
          />
        );
      case "shipments":
        return (
          <ShipmentList
            shipments={shipments}
            onEdit={handleEditShipmentClick}
            onView={handleViewShipment}
            onCreate={handleCreateShipment}
            onDelete={handleDeleteShipment}
          />
        );
      case "categories":
        return (
          <CategoryManagement
            categories={categories}
            onCategoriesChange={handleCategoriesChange}
          />
        );
      case "locations":
        return <LocationManagement />;
      case "admin":
        return user ? <AdminPanel user={user} /> : null;
      default:
        return <Dashboard stats={stats} onEquipmentSelect={handleDashboardEquipmentSelect} />;
    }
  };

  // –≠—Ñ—Ñ–µ–∫—Ç –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
  useEffect(() => {
    if (notificationCount > 0 && activeView === "dashboard") {
      const timer = setTimeout(() => {
        toast.warning(
          `–í–Ω–∏–º–∞–Ω–∏–µ: ${notificationCount} –µ–¥–∏–Ω–∏—Ü —Ç–µ—Ö–Ω–∏–∫–∏ —Ç—Ä–µ–±—É–µ—Ç –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏—è`,
          {
            duration: 5000,
          }
        );
      }, 1000);
      return () => clearTimeout(timer);
    }
  }, [notificationCount, activeView]);

  // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—à–∏–±–∫—É –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö, –µ—Å–ª–∏ –µ—Å—Ç—å
  if (dbError) {
    return (
      <div className="min-h-screen bg-background transition-colors duration-300 flex items-center justify-center p-4">
        <div className="text-center">
          <h1 className="text-xl sm:text-2xl font-bold text-red-600 mb-4">–û—à–∏–±–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö</h1>
          <p className="text-gray-600 text-sm sm:text-base">{dbError}</p>
        </div>
        <Toaster 
          position="top-right"
          theme={isDarkMode ? "dark" : "light"}
        />
      </div>
    );
  }

  // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É, –ø–æ–∫–∞ –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞
  if (!isInitialized) {
    return (
      <div className="min-h-screen bg-background transition-colors duration-300 flex items-center justify-center p-4">
        <div className="text-center">
          <div className="animate-spin rounded-full h-24 w-24 sm:h-32 sm:w-32 border-b-2 border-primary mx-auto mb-4"></div>
          <p className="text-base sm:text-lg text-gray-600">–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...</p>
        </div>
        <Toaster 
          position="top-right"
          theme={isDarkMode ? "dark" : "light"}
        />
      </div>
    );
  }

  // –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ñ–æ—Ä–º—É –≤—Ö–æ–¥–∞
  if (!user) {
    return (
      <div className="min-h-screen bg-background transition-colors duration-300">
        <AuthForm onLogin={handleLogin} />
        <Toaster 
          position="top-right"
          theme={isDarkMode ? "dark" : "light"}
        />
      </div>
    );
  }

  return (
    <div className="min-h-screen bg-background transition-colors duration-300">
      <Navigation 
        activeView={activeView} 
        onViewChange={handleViewChange}
        notificationCount={notificationCount}
        isDarkMode={isDarkMode}
        onThemeToggle={toggleTheme}
        user={user}
        onLogout={handleLogout}
      />
      
      <div className="lg:pl-64">
        <main className="p-3 sm:p-4 lg:p-8">
          <div className="max-w-7xl mx-auto">
            {renderContent()}
          </div>
        </main>
      </div>

      {/* –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ */}
      <SyncNotifications />

      <Toaster 
        position="top-right"
        theme={isDarkMode ? "dark" : "light"}
      />
    </div>
  );
}