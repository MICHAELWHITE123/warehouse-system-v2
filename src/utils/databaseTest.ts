// –ü—Ä–æ—Å—Ç–æ–π —Ç–µ—Å—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–±–æ—Ç—ã –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
import { getDatabase } from '../database/index';
import { DATABASE_CONFIG } from '../config/databaseConfig';

export async function testDatabaseConnection() {
  console.log('üß™ Testing database connection...');
  
  try {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
    console.log('üìã Database config:', {
      fallbackToLocal: DATABASE_CONFIG.fallbackToLocal,
      syncMode: DATABASE_CONFIG.syncMode,
      allowLocalStorage: DATABASE_CONFIG.hybrid.allowLocalStorage,
      allowLocalSync: DATABASE_CONFIG.sync.allowLocalSync
    });

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º localStorage
    try {
      localStorage.setItem('test-key', 'test-value');
      const testValue = localStorage.getItem('test-key');
      localStorage.removeItem('test-key');
      console.log('‚úÖ localStorage is working:', testValue === 'test-value');
    } catch (error) {
      console.error('‚ùå localStorage is not available:', error);
    }

    // –ü–æ–ª—É—á–∞–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    const db = getDatabase();
    console.log('‚úÖ Database instance created successfully');

    // –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø—Ä–æ—Å—Ç—É—é –æ–ø–µ—Ä–∞—Ü–∏—é
    const testTable = 'test_table';
    const testData = { name: 'Test Item', value: 123 };
    
    const result = db.insert(testTable, testData);
    console.log('‚úÖ Insert operation successful:', result);

    const allItems = db.selectAll(testTable);
    console.log('‚úÖ Select operation successful:', allItems);

    // –û—á–∏—â–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
    db.delete(testTable, result.id);
    console.log('‚úÖ Delete operation successful');

    console.log('üéâ All database tests passed!');
    return true;
  } catch (error) {
    console.error('‚ùå Database test failed:', error);
    return false;
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ Supabase
export async function testSupabaseConnection() {
  console.log('üß™ Testing Supabase connection...');
  
  try {
    const supabaseUrl = import.meta.env.VITE_SUPABASE_URL;
    const supabaseKey = import.meta.env.VITE_SUPABASE_ANON_KEY;
    
    console.log('üìã Supabase config:', {
      url: supabaseUrl ? '‚úÖ Set' : '‚ùå Not set',
      key: supabaseKey ? '‚úÖ Set' : '‚ùå Not set'
    });

    if (!supabaseUrl || !supabaseKey) {
      console.warn('‚ö†Ô∏è Supabase credentials not configured');
      return false;
    }

    // –ü—Ä–æ—Å—Ç–æ–π —Ç–µ—Å—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Supabase
    const response = await fetch(`${supabaseUrl}/rest/v1/`, {
      headers: {
        'apikey': supabaseKey,
        'Authorization': `Bearer ${supabaseKey}`
      }
    });

    if (response.ok) {
      console.log('‚úÖ Supabase connection successful');
      return true;
    } else {
      console.error('‚ùå Supabase connection failed:', response.status, response.statusText);
      return false;
    }
  } catch (error) {
    console.error('‚ùå Supabase test failed:', error);
    return false;
  }
}

// –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
export async function runAllTests() {
  console.log('üöÄ Starting database tests...');
  
  const dbTest = await testDatabaseConnection();
  const supabaseTest = await testSupabaseConnection();
  
  console.log('üìä Test results:', {
    database: dbTest ? '‚úÖ PASS' : '‚ùå FAIL',
    supabase: supabaseTest ? '‚úÖ PASS' : '‚ùå FAIL'
  });
  
  return dbTest && supabaseTest;
}
