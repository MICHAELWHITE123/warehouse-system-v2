import { useState, useEffect } from "react";
import { Button } from "./ui/button";
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from "./ui/card";
import { Input } from "./ui/input";
import { Textarea } from "./ui/textarea";
import { Label } from "./ui/label";
import { Badge } from "./ui/badge";

import { ArrowLeft, Plus, Trash2, Package, Users, Search } from "lucide-react";
import { Equipment } from "./EquipmentList";
import { Shipment, ShipmentEquipment, RentalItem } from "./ShipmentList";
import { EquipmentStack } from "./StackManagement";
import { InventoryOverview } from "./InventoryOverview";
import { toast } from "sonner";
import { Dialog, DialogContent, DialogDescription, DialogHeader, DialogTitle, DialogTrigger } from "./ui/dialog";
import { Checkbox } from "./ui/checkbox";
import { ShipmentPDFGenerator } from "./ShipmentPDFGenerator";

interface ShipmentFormProps {
  shipment?: Shipment;
  equipment: Equipment[];
  stacks: EquipmentStack[];
  onSave: (shipment: Omit<Shipment, 'id'>) => void;
  onCancel: () => void;
  onEquipmentView?: (equipment: Equipment) => void;
  isEditing: boolean;
}

interface ShipmentStack {
  stackId: string;
  name: string;
  equipmentIds: string[];
  quantity: number;
}

export function ShipmentForm({
  shipment,
  equipment,
  stacks,
  onSave,
  onCancel,
  onEquipmentView,
  isEditing
}: ShipmentFormProps) {
  const [formData, setFormData] = useState<{
    number: string;
    date: string;
    recipient: string;
    recipientAddress: string;
    responsiblePerson: string;
    comments: string;
    status: "pending" | "in-progress" | "in-transit" | "delivered" | "cancelled";
  }>({
    number: "",
    date: new Date().toISOString().split('T')[0],
    recipient: "",
    recipientAddress: "",
    responsiblePerson: "",
    comments: "",
    status: "pending"
  });

  const [shipmentEquipment, setShipmentEquipment] = useState<ShipmentEquipment[]>([]);
  const [shipmentStacks, setShipmentStacks] = useState<ShipmentStack[]>([]);
  const [rentalItems, setRentalItems] = useState<RentalItem[]>([]);
  const [isEquipmentDialogOpen, setIsEquipmentDialogOpen] = useState(false);
  const [isStackDialogOpen, setIsStackDialogOpen] = useState(false);
  const [searchTerm, setSearchTerm] = useState("");
  const [stackSearchTerm, setStackSearchTerm] = useState("");
  const [errors, setErrors] = useState<Record<string, string>>({});

  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ñ–æ—Ä–º—ã –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏
  useEffect(() => {
    if (shipment && isEditing) {
      setFormData({
        number: shipment.number,
        date: shipment.date,
        recipient: shipment.recipient,
        recipientAddress: shipment.recipientAddress,
        responsiblePerson: shipment.responsiblePerson,
        comments: shipment.comments || "",
        status: shipment.status
      });
      setShipmentEquipment(shipment.equipment);
      setRentalItems(shipment.rental || []);
      // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å—Ç–µ–∫–∏ –µ—Å–ª–∏ –æ–Ω–∏ –±—ã–ª–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã
      setShipmentStacks(shipment.stacks || []);
    } else {
      // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –Ω–æ–º–µ—Ä –æ—Ç–≥—Ä—É–∑–∫–∏ –¥–ª—è –Ω–æ–≤–æ–≥–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞
      const nextNumber = `SH-${new Date().getFullYear()}${String(Date.now()).slice(-4)}`;
      setFormData(prev => ({ ...prev, number: nextNumber }));
    }
  }, [shipment, isEditing]);

  // –§–∏–ª—å—Ç—Ä—É–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ–µ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ
  const availableEquipment = equipment.filter(item => {
    const isAlreadySelected = shipmentEquipment.some(se => se.equipmentId === item.id);
    const isInSelectedStack = shipmentStacks.some(stack => stack.equipmentIds.includes(item.id));
    const matchesSearch = item.name.toLowerCase().includes(searchTerm.toLowerCase()) ||
                         item.serialNumber.toLowerCase().includes(searchTerm.toLowerCase());
    
    return !isAlreadySelected && !isInSelectedStack && matchesSearch;
  });

  // –§–∏–ª—å—Ç—Ä—É–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Å—Ç–µ–∫–∏
  const availableStacks = stacks.filter(stack => {
    const isAlreadySelected = shipmentStacks.some(ss => ss.stackId === stack.id);
    const matchesSearch = stack.name.toLowerCase().includes(stackSearchTerm.toLowerCase()) ||
                         stack.description.toLowerCase().includes(stackSearchTerm.toLowerCase());
    
    return !isAlreadySelected && matchesSearch;
  });

  const handleInputChange = (field: string, value: string) => {
    setFormData(prev => ({ ...prev, [field]: value }));
    if (errors[field]) {
      setErrors(prev => ({ ...prev, [field]: "" }));
    }
  };

  const handleAddEquipment = (equipmentIds: string[]) => {
    const newEquipment = equipmentIds.map(id => {
      const item = equipment.find(e => e.id === id);
      if (!item) return null;
      
      return {
        equipmentId: id,
        name: item.name,
        serialNumber: item.serialNumber,
        quantity: 1
      };
    }).filter(Boolean) as ShipmentEquipment[];

    setShipmentEquipment(prev => [...prev, ...newEquipment]);
    setIsEquipmentDialogOpen(false);
  };

  const handleAddStack = (stackIds: string[]) => {
    const newStacks = stackIds.map(id => {
      const stack = stacks.find(s => s.id === id);
      if (!stack) return null;
      
      return {
        stackId: id,
        name: stack.name,
        equipmentIds: stack.equipmentIds,
        quantity: 1
      };
    }).filter(Boolean) as ShipmentStack[];

    setShipmentStacks(prev => [...prev, ...newStacks]);
    setIsStackDialogOpen(false);
  };

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ —Ç–µ—Ö–Ω–∏–∫–∏
  const handleEquipmentStatusChange = (equipmentId: string, newStatus: string) => {
    if (import.meta.env.DEV) {
      console.log('üîß Equipment status change:', {
        equipmentId,
        newStatus,
        equipmentCount: equipment.length
      });
    }
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞
    toast.success(`–°—Ç–∞—Ç—É—Å —Ç–µ—Ö–Ω–∏–∫–∏ –∏–∑–º–µ–Ω–µ–Ω –Ω–∞: ${newStatus === 'in-use' ? '–í —Ä–∞–±–æ—Ç–µ' : newStatus}`);
  };

  const handleRemoveEquipment = (index: number) => {
    setShipmentEquipment(prev => prev.filter((_, i) => i !== index));
  };

  const handleRemoveStack = (index: number) => {
    setShipmentStacks(prev => prev.filter((_, i) => i !== index));
  };

  const handleEquipmentQuantityChange = (index: number, quantity: number) => {
    if (quantity > 0) {
      setShipmentEquipment(prev => 
        prev.map((item, i) => i === index ? { ...item, quantity } : item)
      );
    }
  };

  const handleStackQuantityChange = (index: number, quantity: number) => {
    if (quantity > 0) {
      setShipmentStacks(prev => 
        prev.map((item, i) => i === index ? { ...item, quantity } : item)
      );
    }
  };

  const handleAddRental = () => {
    setRentalItems(prev => [...prev, {
      id: Date.now().toString(),
      equipment: "",
      quantity: 1,
      link: ""
    }]);
  };

  const handleRemoveRental = (index: number) => {
    setRentalItems(prev => prev.filter((_, i) => i !== index));
  };

  const handleRentalChange = (index: number, field: keyof RentalItem, value: string | number) => {
    setRentalItems(prev => 
      prev.map((item, i) => i === index ? { ...item, [field]: value } : item)
    );
  };

  // –í—ã—á–∏—Å–ª—è–µ–º –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–∑–∏—Ü–∏–π
  const getTotalItems = () => {
    const equipmentTotal = shipmentEquipment.reduce((sum, item) => sum + item.quantity, 0);
    const stacksTotal = shipmentStacks.reduce((sum, stack) => sum + (stack.equipmentIds.length * stack.quantity), 0);
    return equipmentTotal + stacksTotal;
  };

  // –ü–æ–ª—É—á–∞–µ–º —Å—Ç–µ–∫ –ø–æ ID
  const getStackById = (stackId: string) => {
    return stacks.find(stack => stack.id === stackId);
  };

  // –ü–æ–ª—É—á–∞–µ–º –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ —Å—Ç–µ–∫–∞
  const getStackEquipment = (stackId: string) => {
    const stack = getStackById(stackId);
    if (!stack) return [];
    return equipment.filter(item => stack.equipmentIds.includes(item.id));
  };

  const validateForm = () => {
    const newErrors: Record<string, string> = {};

    if (!formData.number.trim()) {
      newErrors.number = "–ù–æ–º–µ—Ä –æ—Ç–≥—Ä—É–∑–∫–∏ –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω";
    }

    if (!formData.date) {
      newErrors.date = "–î–∞—Ç–∞ –æ—Ç–≥—Ä—É–∑–∫–∏ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–∞";
    }

    if (!formData.recipient.trim()) {
      newErrors.recipient = "–ü–æ–ª—É—á–∞—Ç–µ–ª—å –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω";
    }

    if (!formData.recipientAddress.trim()) {
      newErrors.recipientAddress = "–ê–¥—Ä–µ—Å –ø–æ–ª—É—á–∞—Ç–µ–ª—è –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω";
    }

    if (!formData.responsiblePerson.trim()) {
      newErrors.responsiblePerson = "–û—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ –ª–∏—Ü–æ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ";
    }

    if (shipmentEquipment.length === 0 && shipmentStacks.length === 0) {
      newErrors.equipment = "–î–æ–±–∞–≤—å—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–Ω—É –ø–æ–∑–∏—Ü–∏—é –≤ –æ—Ç–≥—Ä—É–∑–∫—É";
    }

    setErrors(newErrors);
    return Object.keys(newErrors).length === 0;
  };

  const handleSubmit = (e: React.FormEvent) => {
    e.preventDefault();

    if (!validateForm()) {
      toast.error("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø—Ä–∞–≤—å—Ç–µ –æ—à–∏–±–∫–∏ –≤ —Ñ–æ—Ä–º–µ");
      return;
    }

    // –°–æ–∑–¥–∞–µ–º —á–µ–∫-–ª–∏—Å—Ç –¥–ª—è –Ω–æ–≤–æ–π –æ—Ç–≥—Ä—É–∑–∫–∏
    const checklist = isEditing ? shipment!.checklist : [
      {
        id: "1",
        title: "–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —É–ø–∞–∫–æ–≤–∫—É –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è",
        description: "–£–±–µ–¥–∏—Ç—å—Å—è –≤ —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç–∏ —É–ø–∞–∫–æ–≤–∫–∏ –≤—Å–µ—Ö –ø–æ–∑–∏—Ü–∏–π",
        isCompleted: false,
        isRequired: true
      },
      {
        id: "2",
        title: "–°–≤–µ—Ä–∏—Ç—å —Å–µ—Ä–∏–π–Ω—ã–µ –Ω–æ–º–µ—Ä–∞",
        description: "–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ —Å–µ—Ä–∏–π–Ω—ã—Ö –Ω–æ–º–µ—Ä–æ–≤ –¥–æ–∫—É–º–µ–Ω—Ç–∞–º",
        isCompleted: false,
        isRequired: true
      },
      {
        id: "3",
        title: "–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∫–æ–º–ø–ª–µ–∫—Ç–Ω–æ—Å—Ç—å —Å—Ç–µ–∫–æ–≤",
        description: "–£–±–µ–¥–∏—Ç—å—Å—è –≤ –Ω–∞–ª–∏—á–∏–∏ –≤—Å–µ–≥–æ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è –≤ —Å—Ç–µ–∫–∞—Ö",
        isCompleted: false,
        isRequired: shipmentStacks.length > 0
      },
      {
        id: "4",
        title: "–ó–∞–≥—Ä—É–∑–∏—Ç—å –≤ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç",
        description: "–ê–∫–∫—É—Ä–∞—Ç–Ω–æ —Ä–∞–∑–º–µ—Å—Ç–∏—Ç—å –≤ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–Ω–æ–º —Å—Ä–µ–¥—Å—Ç–≤–µ",
        isCompleted: false,
        isRequired: true
      },
      {
        id: "5",
        title: "–û—Ñ–æ—Ä–º–∏—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç—ã",
        description: "–ó–∞–ø–æ–ª–Ω–∏—Ç—å –≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã",
        isCompleted: false,
        isRequired: true
      }
    ];

    const shipmentData: Omit<Shipment, 'id'> = {
      ...formData,
      equipment: shipmentEquipment,
      stacks: shipmentStacks,
      rental: rentalItems,
      totalItems: getTotalItems(),
      createdAt: shipment?.createdAt || new Date().toISOString(),
      checklist
    };

    onSave(shipmentData);
  };

  return (
    <div className="space-y-6">
      {/* –ó–∞–≥–æ–ª–æ–≤–æ–∫ */}
      <div className="flex items-center justify-between">
        <div className="flex items-center space-x-4">
          <Button variant="outline" size="sm" onClick={onCancel}>
            <ArrowLeft className="h-4 w-4" />
          </Button>
          <div>
            <h1 className="text-3xl font-bold tracking-tight">
              {isEditing ? "–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –æ—Ç–≥—Ä—É–∑–∫—É" : "–ù–æ–≤–∞—è –æ—Ç–≥—Ä—É–∑–∫–∞"}
            </h1>
            <p className="text-muted-foreground">
              {isEditing ? "–ò–∑–º–µ–Ω–∏—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –æ—Ç–≥—Ä—É–∑–∫–∏" : "–°–æ–∑–¥–∞–π—Ç–µ –Ω–æ–≤—ã–π –æ—Ç–≥—Ä—É–∑–æ—á–Ω—ã–π –ª–∏—Å—Ç"}
            </p>
          </div>
        </div>
        {isEditing && shipment && (
          <ShipmentPDFGenerator 
            shipment={shipment} 
            equipment={equipment}
            className="ml-4"
          />
        )}
      </div>

      <form onSubmit={handleSubmit} className="space-y-6">
        <div className="grid grid-cols-1 lg:grid-cols-3 gap-6">
          {/* –õ–µ–≤–∞—è –∫–æ–ª–æ–Ω–∫–∞ - –û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è */}
          <div className="lg:col-span-1 space-y-6">
            <Card>
              <CardHeader>
                <CardTitle>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –æ—Ç–≥—Ä—É–∑–∫–µ</CardTitle>
                <CardDescription>
                  –û—Å–Ω–æ–≤–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –æ—Ç–≥—Ä—É–∑–æ—á–Ω–æ–≥–æ –ª–∏—Å—Ç–∞
                </CardDescription>
              </CardHeader>
              <CardContent className="space-y-4">
                <div>
                  <Label htmlFor="number">–ù–æ–º–µ—Ä –æ—Ç–≥—Ä—É–∑–∫–∏ *</Label>
                  <Input
                    id="number"
                    value={formData.number}
                    onChange={(e) => handleInputChange("number", e.target.value)}
                    className={errors.number ? "border-red-500" : ""}
                  />
                  {errors.number && (
                    <p className="text-sm text-red-500 mt-1">{errors.number}</p>
                  )}
                </div>

                <div>
                  <Label htmlFor="date">–î–∞—Ç–∞ –æ—Ç–≥—Ä—É–∑–∫–∏ *</Label>
                  <Input
                    id="date"
                    type="date"
                    value={formData.date}
                    onChange={(e) => handleInputChange("date", e.target.value)}
                    className={errors.date ? "border-red-500" : ""}
                  />
                  {errors.date && (
                    <p className="text-sm text-red-500 mt-1">{errors.date}</p>
                  )}
                </div>

                <div>
                  <Label htmlFor="responsiblePerson">–û—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ –ª–∏—Ü–æ *</Label>
                  <Input
                    id="responsiblePerson"
                    value={formData.responsiblePerson}
                    onChange={(e) => handleInputChange("responsiblePerson", e.target.value)}
                    placeholder="–§–ò–û –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ"
                    className={errors.responsiblePerson ? "border-red-500" : ""}
                  />
                  {errors.responsiblePerson && (
                    <p className="text-sm text-red-500 mt-1">{errors.responsiblePerson}</p>
                  )}
                </div>

                <div>
                  <Label htmlFor="comments">–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏</Label>
                  <Textarea
                    id="comments"
                    value={formData.comments}
                    onChange={(e) => handleInputChange("comments", e.target.value)}
                    placeholder="–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏"
                    rows={3}
                  />
                </div>
              </CardContent>
            </Card>

            <Card>
              <CardHeader>
                <CardTitle>–ü–æ–ª—É—á–∞—Ç–µ–ª—å</CardTitle>
                <CardDescription>
                  –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—É—á–∞—Ç–µ–ª–µ –≥—Ä—É–∑–∞
                </CardDescription>
              </CardHeader>
              <CardContent className="space-y-4">
                <div>
                  <Label htmlFor="recipient">–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ –ø–æ–ª—É—á–∞—Ç–µ–ª—è *</Label>
                  <Input
                    id="recipient"
                    value={formData.recipient}
                    onChange={(e) => handleInputChange("recipient", e.target.value)}
                    placeholder="–û–û–û –ù–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–ø–∞–Ω–∏–∏"
                    className={errors.recipient ? "border-red-500" : ""}
                  />
                  {errors.recipient && (
                    <p className="text-sm text-red-500 mt-1">{errors.recipient}</p>
                  )}
                </div>

                <div>
                  <Label htmlFor="recipientAddress">–ê–¥—Ä–µ—Å –ø–æ–ª—É—á–∞—Ç–µ–ª—è *</Label>
                  <Textarea
                    id="recipientAddress"
                    value={formData.recipientAddress}
                    onChange={(e) => handleInputChange("recipientAddress", e.target.value)}
                    placeholder="–ü–æ–ª–Ω—ã–π –∞–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏"
                    rows={3}
                    className={errors.recipientAddress ? "border-red-500" : ""}
                  />
                  {errors.recipientAddress && (
                    <p className="text-sm text-red-500 mt-1">{errors.recipientAddress}</p>
                  )}
                </div>
              </CardContent>
            </Card>

            {/* –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ—Ç–≥—Ä—É–∑–∫–∏ */}
            <Card>
              <CardHeader>
                <CardTitle className="flex items-center gap-2">
                  <Package className="h-5 w-5" />
                  –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ—Ç–≥—Ä—É–∑–∫–∏
                </CardTitle>
              </CardHeader>
              <CardContent>
                <div className="space-y-3">
                  <div className="flex justify-between">
                    <span className="text-muted-foreground">–ï–¥–∏–Ω–∏—Ü —Ç–µ—Ö–Ω–∏–∫–∏:</span>
                    <span className="font-semibold">{shipmentEquipment.reduce((sum, item) => sum + item.quantity, 0)}</span>
                  </div>
                  <div className="flex justify-between">
                    <span className="text-muted-foreground">–°—Ç–µ–∫–æ–≤:</span>
                    <span className="font-semibold">{shipmentStacks.length}</span>
                  </div>
                  <div className="flex justify-between">
                    <span className="text-muted-foreground">–í—Å–µ–≥–æ –ø–æ–∑–∏—Ü–∏–π:</span>
                    <span className="font-semibold">{getTotalItems()}</span>
                  </div>
                  <div className="flex justify-between">
                    <span className="text-muted-foreground">–ê—Ä–µ–Ω–¥–∞:</span>
                    <span className="font-semibold">{rentalItems.length}</span>
                  </div>
                  {errors.equipment && (
                    <p className="text-sm text-red-500">{errors.equipment}</p>
                  )}
                </div>
              </CardContent>
            </Card>

            {/* –û—Å—Ç–∞—Ç–∫–∏ –Ω–∞ —Å–∫–ª–∞–¥–µ */}
            <InventoryOverview 
              equipment={equipment} 
              onEquipmentView={onEquipmentView}
              compactMode={true}
              onEquipmentStatusChange={handleEquipmentStatusChange}
            />
          </div>

          {/* –ü—Ä–∞–≤–∞—è –∫–æ–ª–æ–Ω–∫–∞ - –°–æ–¥–µ—Ä–∂–∏–º–æ–µ –æ—Ç–≥—Ä—É–∑–∫–∏ */}
          <div className="lg:col-span-2 space-y-6">
            {/* –û–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ */}
            <Card>
              <CardHeader>
                <div className="flex items-center justify-between">
                  <div>
                    <CardTitle>–û–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ</CardTitle>
                    <CardDescription>
                      –û—Ç–¥–µ–ª—å–Ω—ã–µ –µ–¥–∏–Ω–∏—Ü—ã —Ç–µ—Ö–Ω–∏–∫–∏ –¥–ª—è –æ—Ç–≥—Ä—É–∑–∫–∏
                    </CardDescription>
                  </div>
                  <Dialog open={isEquipmentDialogOpen} onOpenChange={setIsEquipmentDialogOpen}>
                    <DialogTrigger asChild>
                      <Button variant="outline" size="sm">
                        <Plus className="h-4 w-4 mr-2" />
                        –î–æ–±–∞–≤–∏—Ç—å —Ç–µ—Ö–Ω–∏–∫—É
                      </Button>
                    </DialogTrigger>
                    <DialogContent className="max-w-2xl max-h-[80vh] overflow-y-auto">
                      <DialogHeader>
                        <DialogTitle>–í—ã–±–æ—Ä –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è</DialogTitle>
                        <DialogDescription>
                          –í—ã–±–µ—Ä–∏—Ç–µ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ –æ—Ç–≥—Ä—É–∑–∫—É
                        </DialogDescription>
                      </DialogHeader>
                      <EquipmentSelectionDialog
                        equipment={availableEquipment}
                        onSelect={handleAddEquipment}
                        searchTerm={searchTerm}
                        onSearchChange={setSearchTerm}
                      />
                    </DialogContent>
                  </Dialog>
                </div>
              </CardHeader>
              <CardContent>
                {shipmentEquipment.length === 0 ? (
                  <div className="text-center py-8 text-muted-foreground">
                    –û–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω–æ
                  </div>
                ) : (
                  <div className="space-y-3">
                    {shipmentEquipment.map((item, index) => {
                      const equipmentItem = equipment.find(e => e.id === item.equipmentId);
                      return (
                        <div key={index} className="flex items-center justify-between p-3 border rounded-lg">
                          <div className="flex-1">
                            <p className="font-medium">{item.name}</p>
                            <p className="text-sm text-muted-foreground">
                              {equipmentItem?.category} ‚Ä¢ {item.serialNumber}
                            </p>
                          </div>
                          <div className="flex items-center space-x-2">
                            <Input
                              type="number"
                              value={item.quantity}
                              onChange={(e) => handleEquipmentQuantityChange(index, parseInt(e.target.value) || 1)}
                              className="w-20"
                              min="1"
                            />
                            <Button
                              variant="outline"
                              size="sm"
                              onClick={() => handleRemoveEquipment(index)}
                              className="text-red-600 hover:text-red-700"
                            >
                              <Trash2 className="h-4 w-4" />
                            </Button>
                          </div>
                        </div>
                      );
                    })}
                  </div>
                )}
              </CardContent>
            </Card>

            {/* –°—Ç–µ–∫–∏ */}
            <Card>
              <CardHeader>
                <div className="flex items-center justify-between">
                  <div>
                    <CardTitle>–°—Ç–µ–∫–∏ —Ç–µ—Ö–Ω–∏–∫–∏</CardTitle>
                    <CardDescription>
                      –ì–æ—Ç–æ–≤—ã–µ –∫–æ–º–ø–ª–µ–∫—Ç—ã –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è
                    </CardDescription>
                  </div>
                  <Dialog open={isStackDialogOpen} onOpenChange={setIsStackDialogOpen}>
                    <DialogTrigger asChild>
                      <Button variant="outline" size="sm">
                        <Users className="h-4 w-4 mr-2" />
                        –î–æ–±–∞–≤–∏—Ç—å —Å—Ç–µ–∫
                      </Button>
                    </DialogTrigger>
                    <DialogContent className="max-w-2xl max-h-[80vh] overflow-y-auto">
                      <DialogHeader>
                        <DialogTitle>–í—ã–±–æ—Ä —Å—Ç–µ–∫–æ–≤</DialogTitle>
                        <DialogDescription>
                          –í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç–µ–∫–∏ —Ç–µ—Ö–Ω–∏–∫–∏ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ –æ—Ç–≥—Ä—É–∑–∫—É
                        </DialogDescription>
                      </DialogHeader>
                      <StackSelectionDialog
                        stacks={availableStacks}
                        equipment={equipment}
                        onSelect={handleAddStack}
                        searchTerm={stackSearchTerm}
                        onSearchChange={setStackSearchTerm}
                      />
                    </DialogContent>
                  </Dialog>
                </div>
              </CardHeader>
              <CardContent>
                {shipmentStacks.length === 0 ? (
                  <div className="text-center py-8 text-muted-foreground">
                    –°—Ç–µ–∫–∏ –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω—ã
                  </div>
                ) : (
                  <div className="space-y-3">
                    {shipmentStacks.map((stack, index) => {
                      const stackData = getStackById(stack.stackId);
                      const stackEquipment = getStackEquipment(stack.stackId);
                      return (
                        <div key={index} className="border rounded-lg p-4">
                          <div className="flex items-center justify-between mb-3">
                            <div className="flex-1">
                              <p className="font-medium">{stack.name}</p>
                              <p className="text-sm text-muted-foreground">
                                {stackData?.description}
                              </p>
                              <p className="text-sm text-muted-foreground">
                                {stackEquipment.length} –µ–¥–∏–Ω–∏—Ü —Ç–µ—Ö–Ω–∏–∫–∏
                              </p>
                            </div>
                            <div className="flex items-center space-x-2">
                              <Input
                                type="number"
                                value={stack.quantity}
                                onChange={(e) => handleStackQuantityChange(index, parseInt(e.target.value) || 1)}
                                className="w-20"
                                min="1"
                              />
                              <Button
                                variant="outline"
                                size="sm"
                                onClick={() => handleRemoveStack(index)}
                                className="text-red-600 hover:text-red-700"
                              >
                                <Trash2 className="h-4 w-4" />
                              </Button>
                            </div>
                          </div>
                          
                          {/* –°–æ—Å—Ç–∞–≤ —Å—Ç–µ–∫–∞ */}
                          <div className="bg-muted/50 rounded-lg p-3">
                            <p className="text-sm font-medium mb-2">–°–æ—Å—Ç–∞–≤ —Å—Ç–µ–∫–∞:</p>
                            <div className="grid grid-cols-1 md:grid-cols-2 gap-2">
                              {stackEquipment.map((item) => (
                                <div key={item.id} className="text-sm flex items-center justify-between">
                                  <span className="truncate">{item.name}</span>
                                  <Badge variant="outline" className="text-xs ml-2">
                                    {item.serialNumber}
                                  </Badge>
                                </div>
                              ))}
                            </div>
                          </div>
                        </div>
                      );
                    })}
                  </div>
                )}
              </CardContent>
            </Card>

            {/* –ê—Ä–µ–Ω–¥–∞ */}
            <Card>
              <CardHeader>
                <div className="flex items-center justify-between">
                  <div>
                    <CardTitle>–ê—Ä–µ–Ω–¥–∞</CardTitle>
                    <CardDescription>
                      –ê—Ä–µ–Ω–¥–æ–≤–∞–Ω–Ω–æ–µ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ –æ—Ç –≤–Ω–µ—à–Ω–∏—Ö –ø–æ—Å—Ç–∞–≤—â–∏–∫–æ–≤
                    </CardDescription>
                  </div>
                  <Button type="button" variant="outline" size="sm" onClick={handleAddRental}>
                    <Plus className="h-4 w-4 mr-2" />
                    –î–æ–±–∞–≤–∏—Ç—å –∞—Ä–µ–Ω–¥—É
                  </Button>
                </div>
              </CardHeader>
              <CardContent>
                {rentalItems.length === 0 ? (
                  <div className="text-center py-8 text-muted-foreground">
                    –ê—Ä–µ–Ω–¥–æ–≤–∞–Ω–Ω–æ–µ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω–æ
                  </div>
                ) : (
                  <div className="space-y-3">
                    {rentalItems.map((item, index) => (
                      <div key={index} className="flex items-center space-x-3 p-3 border rounded-lg">
                        <div className="flex-1 grid grid-cols-1 md:grid-cols-3 gap-3">
                          <Input
                            placeholder="–ù–∞–∑–≤–∞–Ω–∏–µ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è"
                            value={item.equipment}
                            onChange={(e) => handleRentalChange(index, "equipment", e.target.value)}
                          />
                          <Input
                            type="number"
                            placeholder="–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ"
                            value={item.quantity}
                            onChange={(e) => handleRentalChange(index, "quantity", parseInt(e.target.value) || 1)}
                            min="1"
                          />
                          <Input
                            placeholder="–°—Å—ã–ª–∫–∞ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)"
                            value={item.link}
                            onChange={(e) => handleRentalChange(index, "link", e.target.value)}
                          />
                        </div>
                        <Button
                          type="button"
                          variant="outline"
                          size="sm"
                          onClick={() => handleRemoveRental(index)}
                          className="text-red-600 hover:text-red-700"
                        >
                          <Trash2 className="h-4 w-4" />
                        </Button>
                      </div>
                    ))}
                  </div>
                )}
              </CardContent>
            </Card>
          </div>
        </div>

        {/* –ö–Ω–æ–ø–∫–∏ –¥–µ–π—Å—Ç–≤–∏–π */}
        <div className="flex justify-end space-x-3 pt-6 border-t">
          <Button type="button" variant="outline" onClick={onCancel}>
            –û—Ç–º–µ–Ω–∞
          </Button>
          <Button type="submit">
            {isEditing ? "–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è" : "–°–æ–∑–¥–∞—Ç—å –æ—Ç–≥—Ä—É–∑–∫—É"}
          </Button>
        </div>
      </form>
    </div>
  );
}

// –ö–æ–º–ø–æ–Ω–µ–Ω—Ç –≤—ã–±–æ—Ä–∞ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è
function EquipmentSelectionDialog({
  equipment,
  onSelect,
  searchTerm,
  onSearchChange
}: {
  equipment: Equipment[];
  onSelect: (equipmentIds: string[]) => void;
  searchTerm: string;
  onSearchChange: (term: string) => void;
}) {
  const [selectedItems, setSelectedItems] = useState<string[]>([]);

  const handleToggle = (equipmentId: string) => {
    setSelectedItems(prev => 
      prev.includes(equipmentId)
        ? prev.filter(id => id !== equipmentId)
        : [...prev, equipmentId]
    );
  };

  const handleSelect = () => {
    onSelect(selectedItems);
    setSelectedItems([]);
  };

  return (
    <div className="space-y-4">
      <div className="relative">
        <Search className="absolute left-3 top-1/2 transform -translate-y-1/2 text-muted-foreground h-4 w-4" />
        <Input
          placeholder="–ü–æ–∏—Å–∫ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è..."
          value={searchTerm}
          onChange={(e) => onSearchChange(e.target.value)}
          className="pl-10"
        />
      </div>

      <div className="max-h-96 overflow-y-auto space-y-2">
        {equipment.length === 0 ? (
          <div className="text-center py-8 text-muted-foreground">
            –î–æ—Å—Ç—É–ø–Ω–æ–µ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ
          </div>
        ) : (
          equipment.map((item) => (
            <div key={item.id} className="flex items-center space-x-3 p-3 border rounded-lg">
              <Checkbox
                checked={selectedItems.includes(item.id)}
                onCheckedChange={() => handleToggle(item.id)}
              />
              <div className="flex-1">
                <p className="font-medium">{item.name}</p>
                <p className="text-sm text-muted-foreground">
                  {item.category} ‚Ä¢ {item.serialNumber} ‚Ä¢ {item.location}
                </p>
              </div>
              <Badge variant="outline">
                {item.status === "available" ? "–î–æ—Å—Ç—É–ø–Ω–æ" : item.status}
              </Badge>
            </div>
          ))
        )}
      </div>

      <div className="flex justify-between items-center pt-4 border-t">
        <p className="text-sm text-muted-foreground">
          –í—ã–±—Ä–∞–Ω–æ: {selectedItems.length} –µ–¥–∏–Ω–∏—Ü
        </p>
        <Button onClick={handleSelect} disabled={selectedItems.length === 0}>
          –î–æ–±–∞–≤–∏—Ç—å –≤—ã–±—Ä–∞–Ω–Ω–æ–µ
        </Button>
      </div>
    </div>
  );
}

// –ö–æ–º–ø–æ–Ω–µ–Ω—Ç –≤—ã–±–æ—Ä–∞ —Å—Ç–µ–∫–æ–≤
function StackSelectionDialog({
  stacks,
  equipment,
  onSelect,
  searchTerm,
  onSearchChange
}: {
  stacks: EquipmentStack[];
  equipment: Equipment[];
  onSelect: (stackIds: string[]) => void;
  searchTerm: string;
  onSearchChange: (term: string) => void;
}) {
  const [selectedStacks, setSelectedStacks] = useState<string[]>([]);

  const handleToggle = (stackId: string) => {
    setSelectedStacks(prev => 
      prev.includes(stackId)
        ? prev.filter(id => id !== stackId)
        : [...prev, stackId]
    );
  };

  const handleSelect = () => {
    onSelect(selectedStacks);
    setSelectedStacks([]);
  };

  const getStackEquipment = (stack: EquipmentStack) => {
    return equipment.filter(item => stack.equipmentIds.includes(item.id));
  };

  return (
    <div className="space-y-4">
      <div className="relative">
        <Search className="absolute left-3 top-1/2 transform -translate-y-1/2 text-muted-foreground h-4 w-4" />
        <Input
          placeholder="–ü–æ–∏—Å–∫ —Å—Ç–µ–∫–æ–≤..."
          value={searchTerm}
          onChange={(e) => onSearchChange(e.target.value)}
          className="pl-10"
        />
      </div>

      <div className="max-h-96 overflow-y-auto space-y-3">
        {stacks.length === 0 ? (
          <div className="text-center py-8 text-muted-foreground">
            –î–æ—Å—Ç—É–ø–Ω—ã–µ —Å—Ç–µ–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã
          </div>
        ) : (
          stacks.map((stack) => {
            const stackEquipment = getStackEquipment(stack);
            return (
              <div key={stack.id} className="border rounded-lg p-4">
                <div className="flex items-start space-x-3">
                  <Checkbox
                    checked={selectedStacks.includes(stack.id)}
                    onCheckedChange={() => handleToggle(stack.id)}
                    className="mt-1"
                  />
                  <div className="flex-1">
                    <p className="font-medium">{stack.name}</p>
                    <p className="text-sm text-muted-foreground mb-2">
                      {stack.description}
                    </p>
                    <p className="text-sm text-muted-foreground mb-2">
                      {stackEquipment.length} –µ–¥–∏–Ω–∏—Ü —Ç–µ—Ö–Ω–∏–∫–∏
                    </p>
                    
                    {/* –ö—Ä–∞—Ç–∫–∏–π —Å–ø–∏—Å–æ–∫ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è */}
                    <div className="bg-muted/50 rounded-lg p-2">
                      <div className="grid grid-cols-1 md:grid-cols-2 gap-1">
                        {stackEquipment.slice(0, 4).map((item) => (
                          <div key={item.id} className="text-xs">
                            {item.name}
                          </div>
                        ))}
                        {stackEquipment.length > 4 && (
                          <div className="text-xs text-muted-foreground">
                            +{stackEquipment.length - 4} –µ–¥–∏–Ω–∏—Ü
                          </div>
                        )}
                      </div>
                    </div>
                  </div>
                </div>
              </div>
            );
          })
        )}
      </div>

      <div className="flex justify-between items-center pt-4 border-t">
        <p className="text-sm text-muted-foreground">
          –í—ã–±—Ä–∞–Ω–æ: {selectedStacks.length} —Å—Ç–µ–∫–æ–≤
        </p>
        <Button onClick={handleSelect} disabled={selectedStacks.length === 0}>
          –î–æ–±–∞–≤–∏—Ç—å –≤—ã–±—Ä–∞–Ω–Ω—ã–µ
        </Button>
      </div>
    </div>
  );
}