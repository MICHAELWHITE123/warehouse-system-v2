import { useState } from "react";
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from "./ui/card";
import { Badge } from "./ui/badge";
import { Button } from "./ui/button";
import { Input } from "./ui/input";
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "./ui/select";
import { Tabs, TabsContent, TabsList, TabsTrigger } from "./ui/tabs";
import { 
  Package, 
  CheckCircle, 
  Wrench, 
  AlertTriangle, 
  Search, 
  Filter,
  MapPin,
  Tag,
  Eye,
  Check
} from "lucide-react";
import { Equipment } from "./EquipmentList";
import { Dialog, DialogContent, DialogDescription, DialogHeader, DialogTitle, DialogTrigger } from "./ui/dialog";
import { toast } from "sonner";


interface InventoryOverviewProps {
  equipment: Equipment[];
  onEquipmentView?: (equipment: Equipment) => void;
  compactMode?: boolean;
  onEquipmentStatusChange?: (equipmentId: string, newStatus: string) => void;
}

interface InventorySummary {
  [key: string]: {
    total: number;
    available: number;
    inUse: number;
    maintenance: number;
  };
}

/**
 * –ö–æ–º–ø–æ–Ω–µ–Ω—Ç –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –æ—Å—Ç–∞—Ç–∫–æ–≤ —Ç–µ—Ö–Ω–∏–∫–∏ –Ω–∞ —Å–∫–ª–∞–¥–µ —Å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å—é –±—ã—Å—Ç—Ä–æ–π –æ—Ç–º–µ—Ç–∫–∏ –ø–æ–≥—Ä—É–∑–∫–∏
 * 
 * @param equipment - –º–∞—Å—Å–∏–≤ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
 * @param onEquipmentView - callback –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –¥–µ—Ç–∞–ª–µ–π –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è
 * @param compactMode - —Ä–µ–∂–∏–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è (–∫–æ–º–ø–∞–∫—Ç–Ω—ã–π –∏–ª–∏ –ø–æ–ª–Ω—ã–π)
 * @param onEquipmentStatusChange - callback –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–± –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è
 */
export function InventoryOverview({ 
  equipment, 
  onEquipmentView, 
  compactMode = false,
  onEquipmentStatusChange
}: InventoryOverviewProps) {
  const [searchTerm, setSearchTerm] = useState("");
  const [filterCategory, setFilterCategory] = useState<string>("all");
  const [filterLocation, setFilterLocation] = useState<string>("all");
  const [isDetailsOpen, setIsDetailsOpen] = useState(false);
  const [loadingEquipment, setLoadingEquipment] = useState<Set<string>>(new Set());



  // Debug logging only in development mode
  if (import.meta.env.DEV) {
    console.log('üìä InventoryOverview data:', {
      equipmentCount: equipment?.length || 0,
      compactMode,
      hasStatusChangeHandler: !!onEquipmentStatusChange
    });
  }

  // –ü–æ–ª—É—á–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–æ–≤
  const categories = Array.from(new Set(equipment.map(item => item.category)));
  const locations = Array.from(new Set(equipment.map(item => item.location)));

  // –í—ã—á–∏—Å–ª—è–µ–º –æ–±—â—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
  const totalStats = equipment.reduce(
    (acc, item) => {
      acc.total++;
      switch (item.status) {
        case "available":
          acc.available++;
          break;
        case "in-use":
          acc.inUse++;
          break;
        case "maintenance":
          acc.maintenance++;
          break;
      }
      return acc;
    },
    { total: 0, available: 0, inUse: 0, maintenance: 0 }
  );

  // –ì—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
  const categoryStats = equipment.reduce((acc: InventorySummary, item) => {
    const category = item.category || "–ë–µ–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏";
    if (!acc[category]) {
      acc[category] = { total: 0, available: 0, inUse: 0, maintenance: 0 };
    }
    acc[category].total++;
    switch (item.status) {
      case "available":
        acc[category].available++;
        break;
      case "in-use":
        acc[category].inUse++;
        break;
      case "maintenance":
        acc[category].maintenance++;
        break;
    }
    return acc;
  }, {});

  // –ì—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ –ø–æ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏—è–º
  const locationStats = equipment.reduce((acc: InventorySummary, item) => {
    const location = item.location || "–ë–µ–∑ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏—è";
    if (!acc[location]) {
      acc[location] = { total: 0, available: 0, inUse: 0, maintenance: 0 };
    }
    acc[location].total++;
    switch (item.status) {
      case "available":
        acc[location].available++;
        break;
      case "in-use":
        acc[location].inUse++;
        break;
      case "maintenance":
        acc[location].maintenance++;
        break;
    }
    return acc;
  }, {});

  // –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è –¥–ª—è –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞
  const filteredEquipment = equipment.filter(item => {
    const matchesSearch = 
      item.name.toLowerCase().includes(searchTerm.toLowerCase()) ||
      item.serialNumber.toLowerCase().includes(searchTerm.toLowerCase());
    
    const matchesCategory = filterCategory === "all" || item.category === filterCategory;
    const matchesLocation = filterLocation === "all" || item.location === filterLocation;
    
    return matchesSearch && matchesCategory && matchesLocation;
  });

  const getStatusIcon = (status: string, size = "h-4 w-4") => {
    switch (status) {
      case "available":
        return <CheckCircle className={`${size} text-green-600`} />;
      case "in-use":
        return <Package className={`${size} text-blue-600`} />;
      case "maintenance":
        return <Wrench className={`${size} text-red-600`} />;
      default:
        return <AlertTriangle className={`${size} text-gray-600`} />;
    }
  };

  const getStatusBadge = (status: string) => {
    switch (status) {
      case "available":
        return <Badge variant="default" className="bg-green-100 text-green-800 dark:bg-green-900 dark:text-green-200">–î–æ—Å—Ç—É–ø–Ω–æ</Badge>;
      case "in-use":
        return <Badge variant="secondary" className="bg-blue-100 text-blue-800 dark:bg-blue-900 dark:text-blue-200">–ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è</Badge>;
      case "maintenance":
        return <Badge variant="destructive">–û–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–µ</Badge>;
      default:
        return <Badge variant="outline">–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ</Badge>;
    }
  };

  /**
   * –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–º–µ—Ç–∫–∏ —Ç–µ—Ö–Ω–∏–∫–∏ –∫–∞–∫ –ø–æ–≥—Ä—É–∂–µ–Ω–Ω–æ–π
   * 
   * –ü—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É-–≥–∞–ª–æ—á–∫—É:
   * 1. –°–æ–∑–¥–∞–µ—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –æ—Ç–≥—Ä—É–∑–∫–∞
   * 2. –¢–µ—Ö–Ω–∏–∫–∞ –¥–æ–±–∞–≤–ª—è–µ—Ç—Å—è –≤ –æ—Ç–≥—Ä—É–∑–∫—É
   * 3. –°—Ç–∞—Ç—É—Å —Ç–µ—Ö–Ω–∏–∫–∏ –º–µ–Ω—è–µ—Ç—Å—è –Ω–∞ "in-use"
   * 4. –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç—Å—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—Ö–µ
   * 
   * @param equipment - –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ –¥–ª—è –æ—Ç–º–µ—Ç–∫–∏ –∫–∞–∫ –ø–æ–≥—Ä—É–∂–µ–Ω–Ω–æ–µ
   */
  const handleMarkAsLoaded = async (equipment: Equipment) => {
    // Debug logging only in development mode
    if (import.meta.env.DEV) {
      console.log('üì¶ Marking equipment as loaded:', {
        id: equipment.id,
        name: equipment.name,
        status: equipment.status,
        loadingCount: loadingEquipment.size
      });
    }
    
    // –ó–∞—â–∏—Ç–∞ –æ—Ç –ø–æ–≤—Ç–æ—Ä–Ω—ã—Ö –Ω–∞–∂–∞—Ç–∏–π
    if (loadingEquipment.has(equipment.id)) {
      if (import.meta.env.DEV) {
        console.log('‚è≠Ô∏è Equipment already being processed:', equipment.id);
      }
      return;
    }
    
    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–ª—è –¥–∞–Ω–Ω–æ–π —Ç–µ—Ö–Ω–∏–∫–∏
    setLoadingEquipment(prev => {
      const newSet = new Set(prev).add(equipment.id);
      return newSet;
    });
    
    try {
      // –°–Ω–∞—á–∞–ª–∞ –ø–æ–ø—Ä–æ–±—É–µ–º –ø—Ä–æ—Å—Ç–æ –ø–æ–∫–∞–∑–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
      toast.success(`–¢–µ—Ö–Ω–∏–∫–∞ "${equipment.name}" –æ—Ç–º–µ—á–µ–Ω–∞ –∫–∞–∫ –ø–æ–≥—Ä—É–∂–µ–Ω–Ω–∞—è (—Ç–µ—Å—Ç–æ–≤—ã–π —Ä–µ–∂–∏–º)`, {
        description: `ID: ${equipment.id}, UUID: ${equipment.uuid || '–Ω–µ —É–∫–∞–∑–∞–Ω'}`,
        duration: 4000
      });
      
      // –£–≤–µ–¥–æ–º–ª—è–µ–º —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–∏–π –∫–æ–º–ø–æ–Ω–µ–Ω—Ç –æ–± –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞
      if (onEquipmentStatusChange) {
        onEquipmentStatusChange(equipment.id, "in-use");
      }
      
    } catch (error) {
      if (import.meta.env.DEV) {
        console.error("‚ùå Error marking equipment as loaded:", error);
      }
      
      // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –ø–æ–Ω—è—Ç–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
      toast.error("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–º–µ—Ç–∫–µ —Ç–µ—Ö–Ω–∏–∫–∏", {
        description: "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É"
      });
    } finally {
      // –°–Ω–∏–º–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∑–∞–≥—Ä—É–∑–∫–∏ –Ω–µ–∑–∞–≤–∏—Å–∏–º–æ –æ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
      setLoadingEquipment(prev => {
        const newSet = new Set(prev);
        newSet.delete(equipment.id);
        return newSet;
      });
    }
  };

  if (compactMode) {
    return (
      <Card>
        <CardHeader className="pb-3">
          <div className="flex items-center justify-between">
            <div>
              <CardTitle className="text-lg">–û—Å—Ç–∞—Ç–∫–∏ –Ω–∞ —Å–∫–ª–∞–¥–µ</CardTitle>
              <CardDescription>
                –û–±—â–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ —Ç–µ—Ö–Ω–∏–∫–∏
              </CardDescription>
            </div>
            <Dialog open={isDetailsOpen} onOpenChange={setIsDetailsOpen}>
              <DialogTrigger asChild>
                <Button variant="outline" size="sm">
                  <Eye className="h-4 w-4 mr-2" />
                  –ü–æ–¥—Ä–æ–±–Ω–µ–µ
                </Button>
              </DialogTrigger>
              <DialogContent className="max-w-4xl max-h-[90vh] overflow-y-auto">
                <DialogHeader>
                  <DialogTitle>–û—Å—Ç–∞—Ç–∫–∏ —Ç–µ—Ö–Ω–∏–∫–∏ –Ω–∞ —Å–∫–ª–∞–¥–µ</DialogTitle>
                  <DialogDescription>
                    –î–µ—Ç–∞–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –Ω–∞–ª–∏—á–∏–∏ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è
                  </DialogDescription>
                </DialogHeader>
                <InventoryOverview 
                  equipment={equipment} 
                  onEquipmentView={onEquipmentView}
                  compactMode={false}
                  onEquipmentStatusChange={onEquipmentStatusChange}
                />
              </DialogContent>
            </Dialog>
          </div>
        </CardHeader>
        <CardContent>
          <div className="grid grid-cols-2 md:grid-cols-4 gap-4">
            <div className="text-center">
              <div className="flex items-center justify-center mb-1">
                <Package className="h-5 w-5 text-muted-foreground mr-1" />
                <span className="text-sm text-muted-foreground">–í—Å–µ–≥–æ</span>
              </div>
              <span className="text-2xl font-bold">{totalStats.total}</span>
            </div>
            <div className="text-center">
              <div className="flex items-center justify-center mb-1">
                <CheckCircle className="h-5 w-5 text-green-600 mr-1" />
                <span className="text-sm text-muted-foreground">–î–æ—Å—Ç—É–ø–Ω–æ</span>
              </div>
              <span className="text-2xl font-bold text-green-600">{totalStats.available}</span>
            </div>
            <div className="text-center">
              <div className="flex items-center justify-center mb-1">
                <Package className="h-5 w-5 text-blue-600 mr-1" />
                <span className="text-sm text-muted-foreground">–í —Ä–∞–±–æ—Ç–µ</span>
              </div>
              <span className="text-2xl font-bold text-blue-600">{totalStats.inUse}</span>
            </div>
            <div className="text-center">
              <div className="flex items-center justify-center mb-1">
                <Wrench className="h-5 w-5 text-red-600 mr-1" />
                <span className="text-sm text-muted-foreground">–¢–û</span>
              </div>
              <span className="text-2xl font-bold text-red-600">{totalStats.maintenance}</span>
            </div>
          </div>

          {/* –¢–æ–ø-3 –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É –¥–æ—Å—Ç—É–ø–Ω–æ–π —Ç–µ—Ö–Ω–∏–∫–∏ */}
          <div className="mt-4 pt-4 border-t">
            <h4 className="text-sm font-medium mb-3">–î–æ—Å—Ç—É–ø–Ω–∞—è —Ç–µ—Ö–Ω–∏–∫–∞ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º:</h4>
            <div className="space-y-2">
              {Object.entries(categoryStats)
                .sort((a, b) => b[1].available - a[1].available)
                .slice(0, 3)
                .map(([category, stats]) => (
                  <div key={category} className="flex items-center justify-between text-sm">
                    <span className="truncate">{category}</span>
                    <div className="flex items-center gap-2">
                      <Badge variant="outline" className="text-xs">
                        {stats.available} –∏–∑ {stats.total}
                      </Badge>
                    </div>
                  </div>
                ))
              }
            </div>
          </div>

          {/* –ë—ã—Å—Ç—Ä–∞—è –æ—Ç–º–µ—Ç–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ–π —Ç–µ—Ö–Ω–∏–∫–∏ */}
          <div className="mt-4 pt-4 border-t">
            <h4 className="text-sm font-medium mb-3 text-green-700 flex items-center gap-2">
              <Check className="h-4 w-4" />
              –ë—ã—Å—Ç—Ä–∞—è –æ—Ç–º–µ—Ç–∫–∞ –ø–æ–≥—Ä—É–∑–∫–∏
            </h4>
            <div className="space-y-2">
              {equipment
                .filter(item => item.status === "available")
                .slice(0, 3)
                .map((item) => (
                  <div key={item.id} className="flex items-center justify-between text-sm">
                    <div className="flex-1 min-w-0">
                      <span className="truncate block">{item.name}</span>
                      <span className="text-xs text-muted-foreground truncate block">
                        {item.category} ‚Ä¢ {item.location}
                      </span>
                    </div>
                    <Button
                      variant="ghost"
                      size="sm"
                      onClick={() => {
                        console.log('–ö–ª–∏–∫ –ø–æ –∫–Ω–æ–ø–∫–µ –≤ –∫–æ–º–ø–∞–∫—Ç–Ω–æ–º —Ä–µ–∂–∏–º–µ –¥–ª—è —Ç–µ—Ö–Ω–∏–∫–∏:', item);
                        handleMarkAsLoaded(item);
                      }}
                      disabled={loadingEquipment.has(item.id)}
                      className="text-green-600 hover:text-green-700 hover:bg-green-50 p-2 h-8 w-8 border border-green-200 hover:border-green-300"
                      title="–û—Ç–º–µ—Ç–∏—Ç—å –∫–∞–∫ –ø–æ–≥—Ä—É–∂–µ–Ω–Ω—É—é"
                    >
                      {loadingEquipment.has(item.id) ? (
                        <div className="h-4 w-4 animate-spin rounded-full border-2 border-green-600 border-t-transparent" />
                      ) : (
                        <Check className="h-4 w-4" />
                      )}
                    </Button>
                  </div>
                ))
              }
              {equipment.filter(item => item.status === "available").length === 0 && (
                <div className="text-center py-2 text-xs text-muted-foreground">
                  –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ–π —Ç–µ—Ö–Ω–∏–∫–∏
                </div>
              )}
            </div>
          </div>
        </CardContent>
      </Card>
    );
  }

  return (
    <div className="space-y-6">
      {/* –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ */}
      <div className="grid grid-cols-1 md:grid-cols-4 gap-4">
        <Card>
          <CardContent className="p-6">
            <div className="flex items-center space-x-2">
              <Package className="h-5 w-5 text-blue-600" />
              <div>
                <p className="text-sm text-muted-foreground">–í—Å–µ–≥–æ –µ–¥–∏–Ω–∏—Ü</p>
                <p className="text-2xl font-bold">{totalStats.total}</p>
              </div>
            </div>
          </CardContent>
        </Card>

        <Card>
          <CardContent className="p-6">
            <div className="flex items-center space-x-2">
              <CheckCircle className="h-5 w-5 text-green-600" />
              <div>
                <p className="text-sm text-muted-foreground">–î–æ—Å—Ç—É–ø–Ω–æ</p>
                <p className="text-2xl font-bold text-green-600">{totalStats.available}</p>
              </div>
            </div>
          </CardContent>
        </Card>

        <Card>
          <CardContent className="p-6">
            <div className="flex items-center space-x-2">
              <Package className="h-5 w-5 text-blue-600" />
              <div>
                <p className="text-sm text-muted-foreground">–í —Ä–∞–±–æ—Ç–µ</p>
                <p className="text-2xl font-bold text-blue-600">{totalStats.inUse}</p>
              </div>
            </div>
          </CardContent>
        </Card>

        <Card>
          <CardContent className="p-6">
            <div className="flex items-center space-x-2">
              <Wrench className="h-5 w-5 text-red-600" />
              <div>
                <p className="text-sm text-muted-foreground">–ù–∞ –¢–û</p>
                <p className="text-2xl font-bold text-red-600">{totalStats.maintenance}</p>
              </div>
            </div>
          </CardContent>
        </Card>
      </div>

      {/* –î–µ—Ç–∞–ª–∏–∑–∞—Ü–∏—è –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º –∏ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏—è–º */}
      <Tabs defaultValue="categories" className="w-full">
        <TabsList className="grid w-full grid-cols-2">
          <TabsTrigger value="categories" className="flex items-center gap-2">
            <Tag className="h-4 w-4" />
            –ü–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
          </TabsTrigger>
          <TabsTrigger value="locations" className="flex items-center gap-2">
            <MapPin className="h-4 w-4" />
            –ü–æ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏—è–º
          </TabsTrigger>
        </TabsList>

        <TabsContent value="categories" className="space-y-4">
          <Card>
            <CardHeader>
              <CardTitle>–û—Å—Ç–∞—Ç–∫–∏ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º</CardTitle>
              <CardDescription>
                –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ç–µ—Ö–Ω–∏–∫–∏ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º –∏ –∏—Ö —Å—Ç–∞—Ç—É—Å–∞–º
              </CardDescription>
            </CardHeader>
            <CardContent>
              <div className="space-y-4">
                {Object.entries(categoryStats)
                  .sort((a, b) => b[1].total - a[1].total)
                  .map(([category, stats]) => (
                    <div key={category} className="border rounded-lg p-4">
                      <div className="flex items-center justify-between mb-3">
                        <h3 className="font-medium">{category}</h3>
                        <Badge variant="outline">–í—Å–µ–≥–æ: {stats.total}</Badge>
                      </div>
                      <div className="grid grid-cols-3 gap-4">
                        <div className="text-center">
                          <div className="flex items-center justify-center mb-1">
                            {getStatusIcon("available")}
                            <span className="text-sm text-muted-foreground ml-1">–î–æ—Å—Ç—É–ø–Ω–æ</span>
                          </div>
                          <span className="text-lg font-semibold text-green-600">{stats.available}</span>
                        </div>
                        <div className="text-center">
                          <div className="flex items-center justify-center mb-1">
                            {getStatusIcon("in-use")}
                            <span className="text-sm text-muted-foreground ml-1">–í —Ä–∞–±–æ—Ç–µ</span>
                          </div>
                          <span className="text-lg font-semibold text-blue-600">{stats.inUse}</span>
                        </div>
                        <div className="text-center">
                          <div className="flex items-center justify-center mb-1">
                            {getStatusIcon("maintenance")}
                            <span className="text-sm text-muted-foreground ml-1">–¢–û</span>
                          </div>
                          <span className="text-lg font-semibold text-red-600">{stats.maintenance}</span>
                        </div>
                      </div>
                    </div>
                  ))
                }
              </div>
            </CardContent>
          </Card>
        </TabsContent>

        <TabsContent value="locations" className="space-y-4">
          <Card>
            <CardHeader>
              <CardTitle>–û—Å—Ç–∞—Ç–∫–∏ –ø–æ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏—è–º</CardTitle>
              <CardDescription>
                –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ç–µ—Ö–Ω–∏–∫–∏ –ø–æ —Å–∫–ª–∞–¥—Å–∫–∏–º –º–µ—Å—Ç–∞–º
              </CardDescription>
            </CardHeader>
            <CardContent>
              <div className="space-y-4">
                {Object.entries(locationStats)
                  .sort((a, b) => b[1].total - a[1].total)
                  .map(([location, stats]) => (
                    <div key={location} className="border rounded-lg p-4">
                      <div className="flex items-center justify-between mb-3">
                        <h3 className="font-medium">{location}</h3>
                        <Badge variant="outline">–í—Å–µ–≥–æ: {stats.total}</Badge>
                      </div>
                      <div className="grid grid-cols-3 gap-4">
                        <div className="text-center">
                          <div className="flex items-center justify-center mb-1">
                            {getStatusIcon("available")}
                            <span className="text-sm text-muted-foreground ml-1">–î–æ—Å—Ç—É–ø–Ω–æ</span>
                          </div>
                          <span className="text-lg font-semibold text-green-600">{stats.available}</span>
                        </div>
                        <div className="text-center">
                          <div className="flex items-center justify-center mb-1">
                            {getStatusIcon("in-use")}
                            <span className="text-sm text-muted-foreground ml-1">–í —Ä–∞–±–æ—Ç–µ</span>
                          </div>
                          <span className="text-lg font-semibold text-blue-600">{stats.inUse}</span>
                        </div>
                        <div className="text-center">
                          <div className="flex items-center justify-center mb-1">
                            {getStatusIcon("maintenance")}
                            <span className="text-sm text-muted-foreground ml-1">–¢–û</span>
                          </div>
                          <span className="text-lg font-semibold text-red-600">{stats.maintenance}</span>
                        </div>
                      </div>
                    </div>
                  ))
                }
              </div>
            </CardContent>
          </Card>
        </TabsContent>
      </Tabs>

      {/* –î–µ—Ç–∞–ª—å–Ω—ã–π —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω–æ–≥–æ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è */}
      <Card>
        <CardHeader>
          <CardTitle className="flex items-center gap-2 text-green-700">
            <Check className="h-5 w-5" />
            –î–æ—Å—Ç—É–ø–Ω–æ–µ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ
          </CardTitle>
          <CardDescription>
            –°–ø–∏—Å–æ–∫ –≤—Å–µ–π —Ç–µ—Ö–Ω–∏–∫–∏ —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º "–î–æ—Å—Ç—É–ø–Ω–æ" - –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –≥–∞–ª–æ—á–∫—É –¥–ª—è –æ—Ç–º–µ—Ç–∫–∏ –∫–∞–∫ –ø–æ–≥—Ä—É–∂–µ–Ω–Ω–æ–π
          </CardDescription>
        </CardHeader>
        <CardContent>
          {/* –§–∏–ª—å—Ç—Ä—ã */}
          <div className="flex flex-col sm:flex-row gap-4 mb-6">
            <div className="relative flex-1">
              <Search className="absolute left-3 top-1/2 transform -translate-y-1/2 text-muted-foreground h-4 w-4" />
              <Input
                placeholder="–ü–æ–∏—Å–∫ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é –∏–ª–∏ —Å–µ—Ä–∏–π–Ω–æ–º—É –Ω–æ–º–µ—Ä—É..."
                value={searchTerm}
                onChange={(e) => setSearchTerm(e.target.value)}
                className="pl-10"
              />
            </div>
            <Select value={filterCategory} onValueChange={setFilterCategory}>
              <SelectTrigger className="w-full sm:w-48">
                <Filter className="h-4 w-4 mr-2" />
                <SelectValue placeholder="–ö–∞—Ç–µ–≥–æ—Ä–∏—è" />
              </SelectTrigger>
              <SelectContent>
                <SelectItem value="all">–í—Å–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏</SelectItem>
                {categories.map(category => (
                  <SelectItem key={category} value={category}>{category}</SelectItem>
                ))}
              </SelectContent>
            </Select>
            <Select value={filterLocation} onValueChange={setFilterLocation}>
              <SelectTrigger className="w-full sm:w-48">
                <SelectValue placeholder="–ú–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ" />
              </SelectTrigger>
              <SelectContent>
                <SelectItem value="all">–í—Å–µ –º–µ—Å—Ç–∞</SelectItem>
                {locations.map(location => (
                  <SelectItem key={location} value={location}>{location}</SelectItem>
                ))}
              </SelectContent>
            </Select>
          </div>

          {/* –°–ø–∏—Å–æ–∫ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è */}
          <div className="space-y-3">
            {filteredEquipment
              .filter(item => item.status === "available")
              .map((item) => (
                <div key={item.id} className="flex items-center justify-between p-3 border rounded-lg">
                  <div className="flex-1">
                    <div className="flex items-center gap-2 mb-1">
                      {getStatusIcon(item.status)}
                      <span className="font-medium">{item.name}</span>
                      {getStatusBadge(item.status)}
                    </div>
                    <p className="text-sm text-muted-foreground">
                      {item.category} ‚Ä¢ {item.serialNumber} ‚Ä¢ {item.location}
                    </p>
                  </div>
                  <div className="flex items-center gap-2">
                    {/* –ö–Ω–æ–ø–∫–∞ –æ—Ç–º–µ—Ç–∫–∏ –∫–∞–∫ –ø–æ–≥—Ä—É–∂–µ–Ω–Ω–æ–π */}
                    <Button
                      variant="ghost"
                      size="sm"
                      onClick={() => {
                        console.log('–ö–ª–∏–∫ –ø–æ –∫–Ω–æ–ø–∫–µ –≤ –ø–æ–ª–Ω–æ–º —Ä–µ–∂–∏–º–µ –¥–ª—è —Ç–µ—Ö–Ω–∏–∫–∏:', item);
                        handleMarkAsLoaded(item);
                      }}
                      disabled={loadingEquipment.has(item.id)}
                      className="text-green-600 hover:text-green-700 hover:bg-green-50 border border-green-200 hover:border-green-300"
                      title="–û—Ç–º–µ—Ç–∏—Ç—å –∫–∞–∫ –ø–æ–≥—Ä—É–∂–µ–Ω–Ω—É—é"
                    >
                      {loadingEquipment.has(item.id) ? (
                        <div className="h-4 w-4 animate-spin rounded-full border-2 border-green-600 border-t-transparent" />
                      ) : (
                        <Check className="h-4 w-4" />
                      )}
                    </Button>
                    
                    {onEquipmentView && (
                      <Button
                        variant="outline"
                        size="sm"
                        onClick={() => onEquipmentView(item)}
                      >
                        <Eye className="h-4 w-4 mr-1" />
                        –ü—Ä–æ—Å–º–æ—Ç—Ä
                      </Button>
                    )}
                  </div>
                </div>
              ))
            }
            {filteredEquipment.filter(item => item.status === "available").length === 0 && (
              <div className="text-center py-8 text-muted-foreground">
                <Package className="h-12 w-12 mx-auto mb-4" />
                <p>–î–æ—Å—Ç—É–ø–Ω–æ–µ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ</p>
              </div>
            )}
          </div>
        </CardContent>
      </Card>
    </div>
  );
}
