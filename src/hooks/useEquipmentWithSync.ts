import { useState, useEffect, useCallback } from 'react';
import { 
  equipmentService
} from '../database/services';
import type { 
  EquipmentWithRelations
} from '../database/types';
import { useRealTimeSync } from './useRealTimeSync';

// –•—É–∫ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ–º —Å real-time —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–µ–π
export function useEquipmentWithSync() {
  const [equipment, setEquipment] = useState<EquipmentWithRelations[]>([]);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState<string | null>(null);

  const loadEquipment = useCallback(async () => {
    try {
      setLoading(true);
      setError(null);
      const data = await equipmentService.getAllEquipment();
      setEquipment(data);
    } catch (err) {
      setError(err instanceof Error ? err.message : 'Failed to load equipment');
    } finally {
      setLoading(false);
    }
  }, []);

  const createEquipment = useCallback(async (data: any) => {
    try {
      const newEquipment = await equipmentService.createEquipment(data);
      await loadEquipment();
      
      // –£–≤–µ–¥–æ–º–ª—è–µ–º –¥—Ä—É–≥–∏—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤
      await notifyEquipmentUpdate('create', newEquipment);
      
      return newEquipment;
    } catch (err) {
      throw new Error(err instanceof Error ? err.message : 'Failed to create equipment');
    }
  }, [loadEquipment]);

  const updateEquipment = useCallback(async (data: any) => {
    try {
      const updatedEquipment = await equipmentService.updateEquipment(data);
      await loadEquipment();
      
      // –£–≤–µ–¥–æ–º–ª—è–µ–º –¥—Ä—É–≥–∏—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤
      await notifyEquipmentUpdate('update', updatedEquipment);
      
      return updatedEquipment;
    } catch (err) {
      throw new Error(err instanceof Error ? err.message : 'Failed to update equipment');
    }
  }, [loadEquipment]);

  const deleteEquipment = useCallback(async (id: number) => {
    try {
      await equipmentService.deleteEquipment(id);
      await loadEquipment();
      
      // –£–≤–µ–¥–æ–º–ª—è–µ–º –¥—Ä—É–≥–∏—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤
      await notifyEquipmentUpdate('delete', { id });
    } catch (err) {
      throw new Error(err instanceof Error ? err.message : 'Failed to delete equipment');
    }
  }, [loadEquipment]);

  // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ real-time —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
  const { 
    isConnected, 
    connectionError, 
    lastUpdate, 
    connect, 
    notifyEquipmentUpdate 
  } = useRealTimeSync({
    onEquipmentUpdate: (event) => {
      console.log('üì¶ Equipment real-time update received:', event);
      // –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –æ—Ç –¥—Ä—É–≥–∏—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤
      loadEquipment();
    },
    autoReconnect: true
  });

  useEffect(() => {
    loadEquipment();
  }, [loadEquipment]);

  return {
    equipment,
    loading,
    error,
    loadEquipment,
    createEquipment,
    updateEquipment,
    deleteEquipment,
    // Real-time —Å—Ç–∞—Ç—É—Å
    realTime: {
      isConnected,
      connectionError,
      lastUpdate,
      reconnect: connect
    }
  };
}
